<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>usg的blog</title>
  
  <subtitle>侦查鸡的天空</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.dgut.top/"/>
  <updated>2020-08-25T06:17:33.773Z</updated>
  <id>https://blog.dgut.top/</id>
  
  <author>
    <name>usg-cn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker学习</title>
    <link href="https://blog.dgut.top/2020/08/25/docker/"/>
    <id>https://blog.dgut.top/2020/08/25/docker/</id>
    <published>2020-08-25T01:41:09.000Z</published>
    <updated>2020-08-25T06:17:33.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker学习记录"><a href="#Docker学习记录" class="headerlink" title="Docker学习记录"></a>Docker学习记录</h1><p>最近也是把基于aurco的视觉室内定位做好了，摄像头通过检测aruco码就可以获得相对距离和角度，再带入整个机器人的地图中就可以起到一个很好的辅助定位的功能。不过确定就是aruco标签的样式是无法更改的，就一张A4纸贴在墙面上非常影响美观，所以说下一步应该就是进行<code>物体检测</code>例如检测到一幅画、一面墙壁、一个楼梯等特征比较明显的物体来辅助定位。</p><p>要实现<code>物体检测</code>我觉得光靠opencv的级联分类器是远远不够的，所以项目肯定是要往速度学习上靠拢的。项目组正好有一台正在使用的GPU服务器，我粗略地看了下配置：cpu是两路志强<code>E5-2640 v4 @ 2.40GHz</code>，8路<code>gtx1080ti</code>，250G内存。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200825101817.png" alt=""></p><p>目前有个问题就是，服务器目前运行着项目组其他成员的一些训练程序而且我们用的编程环境可能不同就会造成<code>cuda</code>、<code>tensorflow</code>环境错误。因此我们要使用<code>docker</code>作为训练环境的整体。本文就是记录一些<code>docker</code>的使用方法，作为初学者，记录一下还是很有必要的。</p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://baike.baidu.com/item/docker/13344470" target="_blank" rel="noopener">简介</a>：Docker是一个<a href="https://baike.baidu.com/item/开源/246339" target="_blank" rel="noopener">开源</a>的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 <a href="https://baike.baidu.com/item/Linux" target="_blank" rel="noopener">Linux</a>或<a href="https://baike.baidu.com/item/Windows/165458" target="_blank" rel="noopener">Windows</a> 机器上，也可以实现<a href="https://baike.baidu.com/item/虚拟化/547949" target="_blank" rel="noopener">虚拟化</a>。容器是完全使用<a href="https://baike.baidu.com/item/沙箱/393318" target="_blank" rel="noopener">沙箱</a>机制，相互之间不会有任何接口。</p><p> Docker <a href="https://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">安装</a>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><p>下载地址：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fhub.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows" target="_blank" rel="noopener">Docker Desktop for Windows - Docker Hub</a></p><p>选择 stable 稳定版下载，傻瓜式安装过程，一键到底。</p><p>电脑重启后打开 Docker，点击右下角任务栏 Docker 的 Dashboard。</p><p>在终端输入docker后看到如下信息则证明安装成功：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200825102534.png" alt=""></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>最近在公司3楼布置了一圈AP网络，用于巡检机器人的调试，但是我们对这个网络的容量一直不是很清楚，今天在github上看到了<code>librespeed-speedtest</code>这个<a href="https://github.com/librespeed/speedtest" target="_blank" rel="noopener">项目</a>，并且这个项目支持docker部署，所以就拿来实践一下，顺带测试一下wifi局域网吞吐容量。<a href="https://hub.docker.com/r/adolfintel/speedtest" target="_blank" rel="noopener">docker地址</a></p><ul><li>机器人网络示意图</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200825135102.png" alt=""></p><ul><li>speedtest docker项目</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200825102722.png" alt=""></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p><a href="https://www.jianshu.com/p/00e8ae89224d" target="_blank" rel="noopener">简书</a></p><p>docker部署起来也是超简单，2分钟就好了</p><h3 id="1-镜像下载："><a href="#1-镜像下载：" class="headerlink" title="1.镜像下载："></a>1.镜像下载：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull adolfintel/speedtest</span><br></pre></td></tr></table></figure><p>网络不好建议重复操作，若显示类似于下方文字，则说明下载完成：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200825135411.png" alt=""></p><h3 id="2-启动docker"><a href="#2-启动docker" class="headerlink" title="2.启动docker"></a>2.启动docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 adolfintel/speedtest:latest</span><br></pre></td></tr></table></figure><blockquote><ul><li>-d，后台运行（建议使用）</li><li>-p，端口映射（可自行修改其它端口）</li></ul></blockquote><p>此时，可以在之前的 Dashboard 中看到后台运行的容器。本机能打开网页 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%3A8080" target="_blank" rel="noopener">http://localhost:8080</a> 也能说明服务启动成功。</p><h3 id="3-测速"><a href="#3-测速" class="headerlink" title="3.测速"></a>3.测速</h3><p>测速过程就非常傻瓜了~</p><p>局域网的其它设备打开网页 http://[PC IP]:8080 即可进行测速。如果不能访问，可能是防火墙、路由器设置或其它方面的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.2.182:8080&#x2F;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200825135726.png" alt=""></p><h3 id="4-设置DMZ主机"><a href="#4-设置DMZ主机" class="headerlink" title="4.设置DMZ主机"></a>4.设置DMZ主机</h3><blockquote><p>让您得以将一部计算机公开显露在互联网上，使所有上传的封包全数转向您指定的计算机。这对您在运行一些使用非特定内传通信端口（incoming port）的应用程序时会相当有用。请谨慎使用。</p></blockquote><p>通俗来说就是电脑通过路由器链接到公司局域网，路由器的ip和电脑局域网ip不同（百层nat狗头），要把电脑设置为<code>DMZ主机</code>之后访问路由器ip就可以访问到测速网页了。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200825140243.png" alt=""></p><h2 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">登录服务器http://192.168.221.11/</span><br><span class="line">ssh zwj@AISRV</span><br><span class="line">查看docker运行列表</span><br><span class="line">docker ps</span><br><span class="line">运行docker</span><br><span class="line">docker run -d -p 8081:80 adolfintel/speedtest:latest</span><br><span class="line">停止docker</span><br><span class="line">docker stop compassionate_knuth</span><br><span class="line">进入docker 启动docker</span><br><span class="line">cd work</span><br><span class="line">cd comprehen/</span><br><span class="line">./docker_start.sh </span><br><span class="line">./docker_into.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker学习记录&quot;&gt;&lt;a href=&quot;#Docker学习记录&quot; class=&quot;headerlink&quot; title=&quot;Docker学习记录&quot;&gt;&lt;/a&gt;Docker学习记录&lt;/h1&gt;&lt;p&gt;最近也是把基于aurco的视觉室内定位做好了，摄像头通过检测aruco码就可
      
    
    </summary>
    
    
    
      <category term="ubuntu" scheme="https://blog.dgut.top/tags/ubuntu/"/>
    
      <category term="docker" scheme="https://blog.dgut.top/tags/docker/"/>
    
      <category term="speedtest" scheme="https://blog.dgut.top/tags/speedtest/"/>
    
  </entry>
  
  <entry>
    <title>基于ArUco的距离角度定位</title>
    <link href="https://blog.dgut.top/2020/08/19/aruco-2d/"/>
    <id>https://blog.dgut.top/2020/08/19/aruco-2d/</id>
    <published>2020-08-19T00:48:45.000Z</published>
    <updated>2020-08-19T01:57:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于ArUco的距离角度定位"><a href="#基于ArUco的距离角度定位" class="headerlink" title="基于ArUco的距离角度定位"></a>基于ArUco的距离角度定位</h1><blockquote><p>利用aruco.estimatePoseSingleMarkers(）函数返回找到的aurco标签的rvec旋转矩阵、tvec位移矩阵进行换算，找出aurco相对于相机cam的距离和角度，实现利用aurco进行定位</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> cv2.aruco <span class="keyword">as</span> aruco</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment">#加载鱼眼镜头的yaml标定文件，检测aruco并且估算与标签之间的距离,获取偏航，俯仰，滚动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#加载相机纠正参数</span></span><br><span class="line">cv_file = cv2.FileStorage(<span class="string">"yuyan.yaml"</span>, cv2.FILE_STORAGE_READ)</span><br><span class="line">camera_matrix = cv_file.getNode(<span class="string">"camera_matrix"</span>).mat()</span><br><span class="line">dist_matrix = cv_file.getNode(<span class="string">"dist_coeff"</span>).mat()</span><br><span class="line">cv_file.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认cam参数</span></span><br><span class="line"><span class="comment"># dist=np.array(([[-0.58650416 , 0.59103816, -0.00443272 , 0.00357844 ,-0.27203275]]))</span></span><br><span class="line"><span class="comment"># newcameramtx=np.array([[189.076828   ,  0.    ,     361.20126638]</span></span><br><span class="line"><span class="comment">#  ,[  0 ,2.01627296e+04 ,4.52759577e+02]</span></span><br><span class="line"><span class="comment">#  ,[0, 0, 1]])</span></span><br><span class="line"><span class="comment"># mtx=np.array([[398.12724231  , 0.      ,   304.35638757],</span></span><br><span class="line"><span class="comment">#  [  0.       ,  345.38259888, 282.49861858],</span></span><br><span class="line"><span class="comment">#  [  0.,           0.,           1.        ]])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># cap.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc('M', 'J', 'P', 'G'))</span></span><br><span class="line"><span class="comment"># cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)</span></span><br><span class="line"><span class="comment"># cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)</span></span><br><span class="line"></span><br><span class="line">font = cv2.FONT_HERSHEY_SIMPLEX <span class="comment">#font for displaying text (below)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#num = 0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    h1, w1 = frame.shape[:<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># 读取摄像头画面</span></span><br><span class="line">    <span class="comment"># 纠正畸变</span></span><br><span class="line">    newcameramtx, roi = cv2.getOptimalNewCameraMatrix(camera_matrix, dist_matrix, (h1, w1), <span class="number">0</span>, (h1, w1))</span><br><span class="line">    dst1 = cv2.undistort(frame, camera_matrix, dist_matrix, <span class="literal">None</span>, newcameramtx)</span><br><span class="line">    x, y, w1, h1 = roi</span><br><span class="line">    dst1 = dst1[y:y + h1, x:x + w1]</span><br><span class="line">    frame=dst1</span><br><span class="line"></span><br><span class="line">    <span class="comment">#灰度化，检测aruco标签，所用字典为6×6——250</span></span><br><span class="line">    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    aruco_dict = aruco.Dictionary_get(aruco.DICT_6X6_250)</span><br><span class="line">    parameters =  aruco.DetectorParameters_create()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用aruco.detectMarkers()函数可以检测到marker，返回ID和标志板的4个角点坐标</span></span><br><span class="line">    corners, ids, rejectedImgPoints = aruco.detectMarkers(gray,aruco_dict,parameters=parameters)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    如果找不打id</span></span><br><span class="line">    <span class="keyword">if</span> ids <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment">#获取aruco返回的rvec旋转矩阵、tvec位移矩阵</span></span><br><span class="line">        rvec, tvec, _ = aruco.estimatePoseSingleMarkers(corners, <span class="number">0.05</span>, camera_matrix, dist_matrix)</span><br><span class="line">        <span class="comment"># 估计每个标记的姿态并返回值rvet和tvec ---不同</span></span><br><span class="line">        <span class="comment">#rvec为旋转矩阵，tvec为位移矩阵</span></span><br><span class="line">        <span class="comment"># from camera coeficcients</span></span><br><span class="line">        (rvec-tvec).any() <span class="comment"># get rid of that nasty numpy value array error</span></span><br><span class="line">        <span class="comment">#print(rvec)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#在画面上 标注auruco标签的各轴</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(rvec.shape[<span class="number">0</span>]):</span><br><span class="line">            aruco.drawAxis(frame, camera_matrix, dist_matrix, rvec[i, :, :], tvec[i, :, :], <span class="number">0.03</span>)</span><br><span class="line">            aruco.drawDetectedMarkers(frame, corners,ids)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">###### 显示id标记 #####</span></span><br><span class="line">        cv2.putText(frame, <span class="string">"Id: "</span> + str(ids), (<span class="number">0</span>,<span class="number">64</span>), font, <span class="number">1</span>, (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>,cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">###### 角度估计 #####</span></span><br><span class="line">        <span class="comment">#print(rvec)</span></span><br><span class="line">        <span class="comment">#考虑Z轴（蓝色）的角度</span></span><br><span class="line">        <span class="comment">#本来正确的计算方式如下，但是由于蜜汁相机标定的问题，实测偏航角度能最大达到104°所以现在×90/104这个系数作为最终角度</span></span><br><span class="line">        deg=rvec[<span class="number">0</span>][<span class="number">0</span>][<span class="number">2</span>]/math.pi*<span class="number">180</span></span><br><span class="line">        <span class="comment">#deg=rvec[0][0][2]/math.pi*180*90/104</span></span><br><span class="line">        <span class="comment"># 旋转矩阵到欧拉角</span></span><br><span class="line">        R=np.zeros((<span class="number">3</span>,<span class="number">3</span>),dtype=np.float64)</span><br><span class="line">        cv2.Rodrigues(rvec,R)</span><br><span class="line">        sy=math.sqrt(R[<span class="number">0</span>,<span class="number">0</span>] * R[<span class="number">0</span>,<span class="number">0</span>] +  R[<span class="number">1</span>,<span class="number">0</span>] * R[<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">        singular=sy&lt; <span class="number">1e-6</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> singular:<span class="comment">#偏航，俯仰，滚动</span></span><br><span class="line">            x = math.atan2(R[<span class="number">2</span>, <span class="number">1</span>], R[<span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">            y = math.atan2(-R[<span class="number">2</span>, <span class="number">0</span>], sy)</span><br><span class="line">            z = math.atan2(R[<span class="number">1</span>, <span class="number">0</span>], R[<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x = math.atan2(-R[<span class="number">1</span>, <span class="number">2</span>], R[<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">            y = math.atan2(-R[<span class="number">2</span>, <span class="number">0</span>], sy)</span><br><span class="line">            z = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 偏航，俯仰，滚动换成角度</span></span><br><span class="line">        rx = x * <span class="number">180.0</span> / <span class="number">3.141592653589793</span></span><br><span class="line">        ry = y * <span class="number">180.0</span> / <span class="number">3.141592653589793</span></span><br><span class="line">        rz = z * <span class="number">180.0</span> / <span class="number">3.141592653589793</span></span><br><span class="line"></span><br><span class="line">        cv2.putText(frame,<span class="string">'deg_z:'</span>+str(ry)+str(<span class="string">'deg'</span>),(<span class="number">0</span>, <span class="number">140</span>), font, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>,</span><br><span class="line">                    cv2.LINE_AA)</span><br><span class="line">        <span class="comment">#print("偏航，俯仰，滚动",rx,ry,rz)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">###### 距离估计 #####</span></span><br><span class="line">        distance = ((tvec[<span class="number">0</span>][<span class="number">0</span>][<span class="number">2</span>] + <span class="number">0.02</span>) * <span class="number">0.0254</span>) * <span class="number">100</span>  <span class="comment"># 单位是米</span></span><br><span class="line">        <span class="comment">#distance = (tvec[0][0][2]) * 100  # 单位是米</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 显示距离</span></span><br><span class="line">        cv2.putText(frame, <span class="string">'distance:'</span> + str(round(distance, <span class="number">4</span>)) + str(<span class="string">'m'</span>), (<span class="number">0</span>, <span class="number">110</span>), font, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>,</span><br><span class="line">                    cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line">        <span class="comment">####真实坐标换算####（to do）</span></span><br><span class="line">        <span class="comment"># print('rvec:',rvec,'tvec:',tvec)</span></span><br><span class="line">        <span class="comment"># # new_tvec=np.array([[-0.01361995],[-0.01003278],[0.62165339]])</span></span><br><span class="line">        <span class="comment"># # 将相机坐标转换为真实坐标</span></span><br><span class="line">        <span class="comment"># r_matrix, d = cv2.Rodrigues(rvec)</span></span><br><span class="line">        <span class="comment"># r_matrix = -np.linalg.inv(r_matrix)  # 相机旋转矩阵</span></span><br><span class="line">        <span class="comment"># c_matrix = np.dot(r_matrix, tvec)  # 相机位置矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">##### DRAW "NO IDS" #####</span></span><br><span class="line">        cv2.putText(frame, <span class="string">"No Ids"</span>, (<span class="number">0</span>,<span class="number">64</span>), font, <span class="number">1</span>, (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>,cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示结果画面</span></span><br><span class="line">    cv2.imshow(<span class="string">"frame"</span>,frame)</span><br><span class="line"></span><br><span class="line">    key = cv2.waitKey(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> key == <span class="number">27</span>:         <span class="comment"># 按esc键退出</span></span><br><span class="line">        print(<span class="string">'esc break...'</span>)</span><br><span class="line">        cap.release()</span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> key == ord(<span class="string">' '</span>):   <span class="comment"># 按空格键保存</span></span><br><span class="line"><span class="comment">#        num = num + 1</span></span><br><span class="line"><span class="comment">#        filename = "frames_%s.jpg" % num  # 保存一张图像</span></span><br><span class="line">        filename = str(time.time())[:<span class="number">10</span>] + <span class="string">".jpg"</span></span><br><span class="line">        cv2.imwrite(filename, frame)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200819094339.png" alt=""><br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200819094340.png" alt=""></p><p>项目地址：<a href="https://github.com/ZengWenJian123/aruco_positioning_2D" target="_blank" rel="noopener">https://github.com/ZengWenJian123/aruco_positioning_2D</a></p><p>博客地址：<a href="https://blog.dgut.top/2020/08/19/aruco-2d/">https://blog.dgut.top/2020/08/19/aruco-2d/</a></p><p>csdn：<a href="https://blog.csdn.net/dgut_guangdian/article/details/108093643" target="_blank" rel="noopener">https://blog.csdn.net/dgut_guangdian/article/details/108093643</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基于ArUco的距离角度定位&quot;&gt;&lt;a href=&quot;#基于ArUco的距离角度定位&quot; class=&quot;headerlink&quot; title=&quot;基于ArUco的距离角度定位&quot;&gt;&lt;/a&gt;基于ArUco的距离角度定位&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;利用aruco.e
      
    
    </summary>
    
    
    
      <category term="opencv" scheme="https://blog.dgut.top/tags/opencv/"/>
    
      <category term="aruco" scheme="https://blog.dgut.top/tags/aruco/"/>
    
      <category term="python" scheme="https://blog.dgut.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>学习matplotlib-python数据可视化</title>
    <link href="https://blog.dgut.top/2020/08/17/learn-matplotlib/"/>
    <id>https://blog.dgut.top/2020/08/17/learn-matplotlib/</id>
    <published>2020-08-17T02:58:06.000Z</published>
    <updated>2020-08-17T06:44:47.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>matplotlib</code>是<a href="https://zh.wikipedia.org/wiki/Python" target="_blank" rel="noopener">Python</a>编程语言及其数值数学扩展包 <a href="https://zh.wikipedia.org/wiki/NumPy" target="_blank" rel="noopener">NumPy</a>的可视化操作界面。它利用通用的<a href="https://zh.wikipedia.org/wiki/部件工具箱" target="_blank" rel="noopener">图形用户界面工具包</a>，如Tkinter, wxPython, <a href="https://zh.wikipedia.org/wiki/Qt" target="_blank" rel="noopener">Qt</a>或<a href="https://zh.wikipedia.org/wiki/GTK%2B" target="_blank" rel="noopener">GTK+</a>，向应用程序嵌入式绘图提供了<a href="https://zh.wikipedia.org/wiki/应用程序接口" target="_blank" rel="noopener">应用程序接口</a>（API）。此外，matplotlib还有一个基于图像处理库（如开放图形库OpenGL）的pylab接口，其设计与<a href="https://zh.wikipedia.org/wiki/MATLAB" target="_blank" rel="noopener">MATLAB</a>非常类似–尽管并不怎么好用<a href="https://zh.wikipedia.org/wiki/Wikipedia:列明来源" target="_blank" rel="noopener">[来源请求]</a>。SciPy就是用matplotlib进行图形绘制。</p><p>matplotlib最初由John D. Hunter撰写，它拥有一个活跃的开发社区，并且根据BSD样式许可证分发。 在John D. Hunter2012年去世前不久，Michael Droettboom被提名为matplotlib的主要开发者。</p><p>截至到2015年10月30日，matplotlib 1.5.x支持Python 2.7到3.5版本。Matplotlib 1.2是第一个支持Python 3.x的版本。Matplotlib 1.4是支持Python 2.6的最后一个版本。</p><blockquote><p>Matplotlib 可能是 Python 2D-绘图领域使用最广泛的套件。它能让使用者很轻松地将数据图形化，并且提供多样化的输出格式。这里将会探索 matplotlib 的常见用法。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Matplotlib及其依赖项可作为轮包用于macOS，Windows和Linux发行版：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install -U pip</span><br><span class="line">python -m pip install -U matplotlib</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200817110828.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Matplotlib&quot;&gt;&lt;a href=&quot;#Matplotlib&quot; class=&quot;headerlink&quot; title=&quot;Matplotlib&quot;&gt;&lt;/a&gt;Matplotlib&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://blog.dgut.top/tags/python/"/>
    
      <category term="matplotlib" scheme="https://blog.dgut.top/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>室内定位</title>
    <link href="https://blog.dgut.top/2020/08/03/%E8%A7%86%E8%A7%89%E5%AE%A4%E5%86%85%E5%AE%9A%E4%BD%8D/"/>
    <id>https://blog.dgut.top/2020/08/03/%E8%A7%86%E8%A7%89%E5%AE%A4%E5%86%85%E5%AE%9A%E4%BD%8D/</id>
    <published>2020-08-03T01:35:57.000Z</published>
    <updated>2020-08-19T00:50:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="室内定位"><a href="#室内定位" class="headerlink" title="室内定位"></a>室内定位</h1><p>机器人的室内定位由于卫星导航失效，主要利用机器人底盘 的<code>轮式光电编码器里程记</code>、<code>惯性测量模块</code>和<code>视觉传感器</code>进行定位。轮式里程计和惯性导航集成在机器人的底盘硬件部分，二者算法简单快速，但精度不高，容易受到环境的影响且存在严重的<code>误差累积</code>。同时机器人使用的是<a href="https://baike.baidu.com/item/%E9%BA%A6%E5%85%8B%E7%BA%B3%E5%A7%86%E8%BD%AE/3827219?fr=aladdin" target="_blank" rel="noopener">麦克纳姆轮</a>它们允许<strong>横盘走势</strong>、全方向移动但是可以被横向推着走，轮子上的横向<strong>小轮的运动姿态无法被编码器捕获</strong>，这样会加剧里程计的误差累计。</p><p>所以我们需要利用机器人上搭载的摄像头进行视觉定位进行<code>辅助组合定位</code>。</p><h1 id="国内外的解决方法"><a href="#国内外的解决方法" class="headerlink" title="国内外的解决方法"></a>国内外的解决方法</h1><table><thead><tr><th>定位技术</th><th>范围</th><th>分辨率</th><th>抗干扰</th></tr></thead><tbody><tr><td>RFID射频标签</td><td>5cm-5m</td><td>米级</td><td>弱</td></tr><tr><td>WIFI</td><td>5-10m</td><td>米级</td><td>强</td></tr><tr><td>蓝牙</td><td>2-10m</td><td>米级</td><td>弱</td></tr><tr><td>激光雷达SLAM</td><td>0-10(25)m</td><td>厘米级</td><td>强</td></tr><tr><td>超宽频UWB标签</td><td>60-300m</td><td>分米级</td><td>强</td></tr><tr><td>红外线</td><td>5-10m</td><td>-</td><td>弱</td></tr><tr><td>超声波</td><td>1-10m</td><td>分米级</td><td>强</td></tr><tr><td>计算机视觉</td><td>1m-10m</td><td>米级</td><td>弱</td></tr></tbody></table><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200803101357.png" alt=""></p><h2 id="RFID-定位技术-1"><a href="#RFID-定位技术-1" class="headerlink" title="RFID 定位技术[1]"></a>RFID 定位技术[1]</h2><p>常用的 RFID（Radio Frequency Identification）定位系统主要由标签、读写器、中间件以及数据库四个部分组成。其定位方法也比较简单，首先通过读写器接收目标设备与标签之间的位置关系信息，之后将该信息通过中间件传入定位系统进行后续操作。在 RFID 定位的应用性研究方面，许多团队已经取得了不错的研究<br>成果。2004 年 Ni 团队完成了基于 RFID 技术的 LANDMARC 系统，在实现过程中提出了一种基于固定位置的参考标签辅助定位方法[2]，该方法使得系统的定位精度被控制在 1m 内。但是固定位置的参考标签有一定的局限性，为了改善这个问题，Zhao 项目组采用大量的参考标签作为辅助[3]，提前剔除掉待定位物品中可<br>能性不大的位置信息，降低计算量的同时也提高了定位精度。以上述研究为代表，不难发现 RFID 定位技术有着定位速度快、对环境要求低的优点，但同时也有着需要提前部署额外基站设备的劣势。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200803110427.png" alt=""></p><p>小结：定位速度快、对环境要求低的优点，但同时也有着需要提前部署额外基站设备的劣势。</p><h2 id="Wi-Fi-定位技术"><a href="#Wi-Fi-定位技术" class="headerlink" title="Wi-Fi 定位技术"></a>Wi-Fi 定位技术</h2><p>Wi-Fi 是一种基于 IEEE 802.11 标准的 WLAN 技术。Wi-Fi 定位的实现原理基于位置指纹模型，首先根据各个 AP 接收目标发出的 Wi-Fi 信号的强弱程度构建位置指纹模型，然后将定位时的 Wi-Fi 信号强度与模型中的记录进行匹配从实现定位。比较常用的视觉定位系统是由微软研究院研发的 RADAR 定位系统，该系<br>统能够达到 m 级的定位精度[4]。最近，有研究将 Wi-Fi 定位与递归神经网络（Recurrent Neural Networks，RNN）相结合，提出了一种基于 RNN 模型的 Wi-Fi定位系统。与多层感知模型（Multilayer Perceptron，MLP）相比，基于 RNN 的Wi-Fi 定位系统具有更高的定位精度[5]，但定位方法仍未脱离额外基站的辅助。Wi-Fi 定位技术之所以如此普遍在于其性价比较高，用户可以通过移动终端（如手机、笔记本等智能设备）实现定位。同时，基于 Wi-Fi 的定位模型计算比较简单，信号传输速度较快，覆盖半径较大。但要实现更高精度的定位，仍需要提前部署更多的 AP，造成较多的前期资源投入。</p><p>小结：wifi定位技术可以复用现有的机器人通讯设备，要实现更高精度的定位，仍需要提前部署更多的 AP，而且需要提前测量网格中的wifi位置指纹。</p><h2 id="蓝牙定位技术"><a href="#蓝牙定位技术" class="headerlink" title="蓝牙定位技术"></a>蓝牙定位技术</h2><p>蓝牙技术是一种基于无线数据规范，其定位原理是通过计算蓝牙基站发射信号到达目标设备的时间，然后根据时间计算距离确定目标位置。Momose 项目组基于粒子滤波和蓝牙信标的定位算法，通过修正 particle filter 的似然函数，减少了蓝牙信号在传输过程中可能受到环境因素的干扰[6]。在另一个研究中，Zhu 等<br>人提出了一种基于 RSSI（Receive Signal Strength Indication）的蓝牙定位方法[7]。该方法为了减小由于所选取参考点位置不同而带来的定位误差，设计了一个Gaussian filter 来预处理不同采样点所接收的蓝牙信号，使定位精度被控制在 1m以内的概率提升为 80%。蓝牙定位技术的安全性、稳定性、便捷性是它的突出优势，但蓝牙定位技术的局限性也同样明显，由于基站信号强度的限制其只能在较小范围中实现定位。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200803110311.png" alt=""></p><h2 id="UWB"><a href="#UWB" class="headerlink" title="UWB"></a>UWB</h2><p>UWB技术是一种使用1GHz以上频率带宽的无线载波通信技术。它不采用正弦载波，而是利用纳秒级的非正弦波窄脉冲传输数据，因此其所占的<a href="https://baike.baidu.com/item/频谱/7707276" target="_blank" rel="noopener">频谱</a>范围很大，尽管使用<a href="https://baike.baidu.com/item/无线通信/80254" target="_blank" rel="noopener">无线通信</a>，但其数据传输速率可以达到几百兆比特每秒以上。使用UWB技术可在非常宽的带宽上传输信号，美国联邦通信委员会（<a href="https://baike.baidu.com/item/FCC/2146" target="_blank" rel="noopener">FCC</a>）对UWB技术的规定为：在3.1~10.6GHz频段中占用500MHz以上的<a href="https://baike.baidu.com/item/带宽/266879" target="_blank" rel="noopener">带宽</a>。</p><p>UWB技术始于20世纪60年代兴起的脉冲通信技术。UWB技术利用频谱极宽的超宽基带脉冲进行通信，故又称为基带通信技术、无线载波通信技术，主要用于<a href="https://baike.baidu.com/item/军用雷达/3183877" target="_blank" rel="noopener">军用雷达</a>、定位和低截获率/低侦测率的通信系统中。2002年2月，美国联邦通信委员会发布了民用UWB设备使用频谱和功率的初步规定。该规定中，将相对带宽大于0.2或在传输的任何时刻带宽大于500MHz的通信系统称为UWB系统，同时批准了UWB技术可用于民用商品。随后，日本于2006年8月开放了超宽带频段。由于UWB技术具有数据传输速率高（达1Gbit/s）、抗多径干扰能力强、功耗低、成本低、穿透能力强、截获率低、与现有其他无线通信系统共享频谱等特点，UWB技术成为无线个人局域网通信技术（WPAN）的首选技术.</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200803110343.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200805135828.jpg" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200805135902.png" alt=""></p><p>小结：定位准确，但是需要部署有源基站</p><h2 id="机器视觉"><a href="#机器视觉" class="headerlink" title="机器视觉"></a>机器视觉</h2><p>机器人视觉研究的核心内容是：<strong>视觉定位与导航、路径规划、避障、多传感器融合</strong>。视觉定位技术有多种，包括单目视觉、双目视觉、多目视觉、RGB-D等，后三种方法可以使图像具有深度信息，这些视觉“眼睛”亦可以称为VO–视觉里程计。VO在机器人乃至计算机视觉问题中，是一个通过分析处理相关图像序列来确定机器人的位置和姿态的解决方案。</p><p>现今，随着计算机图像处理技术的不断进步以及传感器电子科学的飞速发展，使得越来越多的研究者采用摄像机作为全自主移动机器人的感知元器件，这主要是因为常见的超声或红外传感器感知信息能力有限，鲁棒性差，而视觉系统则可以弥补这些缺点。但是，现实世界是立体的、三维的，而投影在摄像头感光器件（CCD/CMOS）上的图像是二维的、平面的，因此，基于摄像机的视觉处理目标就是从感知到的二维图像中提取有关的三维世界信息，用于机器人的定位与导航。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200715113031.png" alt=""></p><p>小结：可以利用机器人已有的视觉模块，但是很容易被干扰，精度也难得到很高的水平。</p><h1 id="视觉定位研究"><a href="#视觉定位研究" class="headerlink" title="视觉定位研究"></a>视觉定位研究</h1><p>视觉定位不需要诸如wifi、蓝牙、UWB等定位方式提前在定位地点部署基站，视觉定位经过多年的发展广泛应用于机器人定位、物流等领域。在线定位阶段，常用的视觉定位系统主要做了三件事情：图像信息匹配、位姿求解、位置计算，其中位姿求解对视觉定位起到关键作用。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200715093858.png" alt=""></p><h2 id="ArUco标签"><a href="#ArUco标签" class="headerlink" title="ArUco标签"></a>ArUco标签</h2><p>ArUco 是由RafaelMuñoz和Sergio Garrido开发的用于检测方形基准标记的流行库，其在许多计算机视觉应用程序中，姿势估计非常重要：机器人导航，增强现实等等。该过程基于发现真实环境中的3d点与其2d图像投影之间的对应关系。这通常是一个困难的步骤，因此通常使用合成或基准标记来简化操作。<br>使用ArUco记号通常是一个常用的途径之一。这标记的主要优势是单个记号就提供了获取相机姿态的足够对应信息。同时，记号的内部二进制编码使得标记在错误检查和修正等方面保持一定的稳定性。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200715091518.png" alt=""></p><p>一个ArUco标记外围都有一组黑色边框，同时内部有着确定该标记ID的二维矩阵组合而成。黑色的边框能加速标记在图像中的检测速度，内部的二维编码能唯一识别该标记，同时进行错误检测和错误修复。标记的大小确定了内部矩阵的大小，上图是一个6×6大小的标记带有36bits的信息。而这些信息储存在不标记字典中。</p><h2 id="ArUco与二维码的比较"><a href="#ArUco与二维码的比较" class="headerlink" title="ArUco与二维码的比较"></a>ArUco与二维码的比较</h2><table><thead><tr><th>功能</th><th>ArUco</th><th>二维码</th></tr></thead><tbody><tr><td>储存信息</td><td>只能存储简单id数字信息</td><td>可以存储任意自定义信息</td></tr><tr><td>检测难易</td><td>检测简单、快速，并且具有很强的鲁棒性</td><td>在远距离、大偏角容易丢失</td></tr><tr><td>检测模块</td><td>cv2.aruco模块，直接返回标签的姿势等信息</td><td>opencv4.0+才完全支持，且识别效率不高</td></tr></tbody></table><p>在目前室内定位应用中，我们无需在标签上存储太多的信息，有区分的id即可，实际验证中ArUco更容易利用摄像头捕捉到（这很重要），况且ArUco本身就是广泛应用于做姿势估计的。</p><h2 id="ArUco标签识别过程"><a href="#ArUco标签识别过程" class="headerlink" title="ArUco标签识别过程"></a>ArUco标签识别过程</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200805151200.png" alt=""></p><p>1.灰度化画面信息像素：摄像头采集到的信息一般是彩色的，但是我们的二维码是黑白的<br>2.设置预定义的字典： aruco.Dictionary_get(aruco.DICT_6X6_250)<br>3.使用默认值初始化检测器参数： aruco.DetectorParameters_create()<br>4.解码：检测到marker，返回ID和标志板的4个角点坐标，</p><p>具体过程可以看我的这篇文章：<a href="https://blog.dgut.top/2020/07/15/python-aruco/">链接1</a> <a href="https://blog.csdn.net/dgut_guangdian/article/details/107814300" target="_blank" rel="noopener">链接2</a></p><h2 id="ArUco识别结果"><a href="#ArUco识别结果" class="headerlink" title="ArUco识别结果"></a>ArUco识别结果</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200715114612.png" alt=""></p><hr><h2 id="获取与aruco标签之间的距离"><a href="#获取与aruco标签之间的距离" class="headerlink" title="获取与aruco标签之间的距离"></a>获取与aruco标签之间的距离</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###### 距离估计 与相机标定影响很大#####</span></span><br><span class="line">distance = ((tvec[<span class="number">0</span>][<span class="number">0</span>][<span class="number">2</span>] + <span class="number">0.02</span>) * <span class="number">0.0254</span>) * <span class="number">100</span>  <span class="comment"># 单位是米</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200812144658.png" alt=""><br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200812152218.jpg" alt=""></p><h2 id="To-do"><a href="#To-do" class="headerlink" title="To do"></a>To do</h2><p>获取角度</p><p>rvec是以弧度表示的欧拉角。需要先使用cv2.Rodrigues将rvec转换为矩阵。然后将矩阵转换为欧拉角，rvec是一个指向向量，向量的长度（以弧度为单位）对应于垂直于该指向向量的平面中的旋转弧度。</p><p><code>rvec</code>是Rodrigues旋转向量或<a href="https://en.wikipedia.org/wiki/Axis–angle_representation" target="_blank" rel="noopener">轴角表示</a></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200812162254.png" alt=""></p><p><code>rvec</code>和<code>tvec</code>代表什么？</p><p>现在，<code>rvec</code>和<code>tvec</code>代表什么？</p><p>它们允许将以一个坐标系表示的3D点转换为另一个坐标系。在这里，您可以将标签框架中表示的3D点转换为相机框架：</p><p><img src= "/img/loading.gif" data-src="https://answers.opencv.org/upfiles/1562748098917871.png" alt="图片说明"></p><p>因此，对于第一种情况，您应该具有（这里以标记X轴为例）：</p><p><img src= "/img/loading.gif" data-src="https://answers.opencv.org/upfiles/15627482777940383.png" alt="图片说明"></p><p>对于平凡的情况，您可以通过查看允许将标签的X轴，Y轴和Z轴转换为相机框架的值来恢复旋转矩阵。</p><hr><p>我认为，极少需要使用欧拉角，我不喜欢它们。为什么？</p><p>首先，因为它们是<a href="https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix" target="_blank" rel="noopener">欧拉角的</a><strong>12种不同</strong> <a href="https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix" target="_blank" rel="noopener">表示/惯例</a>。所以首先您必须同意在与其他人/代码打交道时使用哪种欧拉约定。</p><p>然后，<a href="https://en.wikipedia.org/wiki/Gimbal_lock" target="_blank" rel="noopener">云台锁定</a>。</p><p>仅在必须能够解释旋转时才需要欧拉角。因此仅用于打印或作为用户输入（例如，在Blender中旋转CAD模型）。</p><p>其余时间，应使用旋转矩阵或四元数表示来完成计算。</p><p><code>tvec</code>直接是相机框架和标签框架之间的平移</p><hr><p>利用aruco码可以直接估算姿态的特性，反算出相机姿态（尚未完成）</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200803112936.png" alt=""><br><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200803112937.png" alt=""></p><p>引用：[1]李智猛. 基于WebGL的场景识别视觉定位系统研究[D].杭州师范大学,2020.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;室内定位&quot;&gt;&lt;a href=&quot;#室内定位&quot; class=&quot;headerlink&quot; title=&quot;室内定位&quot;&gt;&lt;/a&gt;室内定位&lt;/h1&gt;&lt;p&gt;机器人的室内定位由于卫星导航失效，主要利用机器人底盘 的&lt;code&gt;轮式光电编码器里程记&lt;/code&gt;、&lt;code&gt;惯性测量
      
    
    </summary>
    
    
    
      <category term="opencv" scheme="https://blog.dgut.top/tags/opencv/"/>
    
      <category term="aruco" scheme="https://blog.dgut.top/tags/aruco/"/>
    
      <category term="python" scheme="https://blog.dgut.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>松山湖机器人公司汇总</title>
    <link href="https://blog.dgut.top/2020/07/30/small-car/"/>
    <id>https://blog.dgut.top/2020/07/30/small-car/</id>
    <published>2020-07-30T02:51:42.000Z</published>
    <updated>2020-08-06T09:11:28.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="松灵机器人"><a href="#松灵机器人" class="headerlink" title="松灵机器人"></a>松灵机器人</h2><p>官方网站：<a href="http://www.agilex.ai/" target="_blank" rel="noopener">http://www.agilex.ai/</a></p><p>固定电话：+86-0769-22892150<br>本部地址：东莞市松山湖中小企业创业园10栋1楼</p><p>邮箱：<a href="mailto:sales@agilex.ai">sales@agilex.ai</a><br>电话：0769-22892150<br>手机：19925374409</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200730114812.png" alt=""></p><blockquote><p>松灵机器人有限公司成立于2016年，是国内领先的机器人底盘制造商和移动机器人系统解决方案服务商。 目前，松灵机器人已经拥有通用型UGV、室内小型AGV、线控改装电动车等移动机器人底盘产品，可服务于安防巡检、园区工业、农业灌溉、物流运输、检测勘探、科研教育等各个领域，为全球不同地区的客户提供性能稳定、质量可靠、7*24h售后无忧的可靠服务。</p><p>松灵机器人致力于打造一流的智能制造、智能工业等基础设施，从而实现“让智能机器人进一步解放人类生产力”的伟大愿景。</p></blockquote><h3 id="公司产品概揽"><a href="#公司产品概揽" class="headerlink" title="公司产品概揽"></a>公司产品概揽</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806170643.png" alt=""></p><blockquote><p>松灵拥有领先的线控型底盘研发技术,可生产适用于各类行业应用场景的低慢速UGV线控底盘,包括轮式与履带<br>式两大体系,目前已经覆盖通用、越野、室内、特殊作业4类典型场景。</p></blockquote><h3 id="候选产品"><a href="#候选产品" class="headerlink" title="候选产品"></a>候选产品</h3><h4 id="1-TRACER"><a href="#1-TRACER" class="headerlink" title="1.TRACER"></a>1.TRACER</h4><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200730105745.png" alt=""></p><blockquote><p>TRACER作为一款两轮差速AGV，在室内运输领域具有独特的优势，小巧灵活的结构使得它能自由穿梭在各种室内环境，高承载能力及强劲动力搭配使它单次搬运效率有极大的优势，搭配感知系统更能自主运行，成本低、效率高、部署快，是室内运输场景的性价比之王</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200730105723.png" alt=""></p><p><img src= "/img/loading.gif" data-src="http://www.agilex.ai/upload/pics/7/200609111054_2.jpg" alt="img"></p><p><strong>产品特点</strong>：支持Apollo系统（自动驾驶等更高级功能）、预留多种孔位可以搭载摄像头、IMU、路由等设备，附带SDK二次开发能力出色</p><h4 id="2-BUNKER"><a href="#2-BUNKER" class="headerlink" title="2.BUNKER"></a>2.BUNKER</h4><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200730105809.png" alt=""></p><blockquote><p>BUNKER采用履带式差速机械机构，具有极强的地形适应能力，专为特殊作业环境设计，具有差速自转、载重能力强、机械损耗小、防护等级高等特点。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200730105822.png" alt=""></p><p><img src= "/img/loading.gif" data-src="http://www.agilex.ai/upload/pics/1/200608153653_4.jpg" alt="img"></p><p><img src= "/img/loading.gif" data-src="http://www.agilex.ai/upload/pics/1/200610115053_4.jpg" alt="img"></p><p><strong>产品特点</strong>：具备全地形通行能力，履带设计可以上下楼梯，重心稳定，前进角度可以达到36度，可作为户外机器人底盘选型</p><h4 id="3-SCOUT-MINI四轮差速系列"><a href="#3-SCOUT-MINI四轮差速系列" class="headerlink" title="3.SCOUT MINI四轮差速系列"></a>3.SCOUT MINI四轮差速系列</h4><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806170805.png" alt=""></p><blockquote><p>SCOUT MINI是SCOUT四轮差速底盘系列的一员，继承了SCOUT系列四轮驱动、独立悬挂、差速自转等特点的同时，采用轮毂电机进行全新设计，使得机身体积缩小50%，速度更是达到20Km/H。使用麦克纳姆轮载重可达50KG。该底盘适用于巡检、拍摄等高机动性要求场景，它的小身材可以帮助不同的客户灵活探索未知的大世界。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806170814.png" alt=""></p><h5 id="产品参数"><a href="#产品参数" class="headerlink" title="产品参数"></a>产品参数</h5><table><thead><tr><th align="center">产品</th><th align="center">麦克纳姆轮版本</th><th align="center">越野公路轮版本</th></tr></thead><tbody><tr><td align="center">额定载重</td><td align="center">50KG</td><td align="center">10-15KG（变更）</td></tr><tr><td align="center">最大速度</td><td align="center">10KM/H</td><td align="center">20KM/H</td></tr><tr><td align="center">悬挂形式</td><td align="center">摇臂独立悬架</td><td align="center">前后双横臂独立悬架</td></tr><tr><td align="center">车体重量</td><td align="center">20KG</td><td align="center">20KG</td></tr><tr><td align="center">最小转弯半径</td><td align="center">可原地转弯</td><td align="center">可原地转弯</td></tr><tr><td align="center">长 x 宽 x 高</td><td align="center">625 × 585 × 222（mm ）</td><td align="center">635 × 549 × 248（mm ）</td></tr><tr><td align="center">轴距 (mm)</td><td align="center">475</td><td align="center">460</td></tr><tr><td align="center">轮距（mm）</td><td align="center">540</td><td align="center">450</td></tr><tr><td align="center">充电时间</td><td align="center">1.5h</td><td align="center">1.5h</td></tr><tr><td align="center">价格（裸车）</td><td align="center">RM9880</td><td align="center">RM9499</td></tr></tbody></table><h5 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h5><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806152858.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806154046.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806154117.png" alt=""></p><h5 id="产品特点"><a href="#产品特点" class="headerlink" title="产品特点"></a>产品特点</h5><ul><li>四轮驱动，差速自转</li><li>独立悬挂，防撞减震，越野性能强劲</li><li>标准协议，支持二次开发</li><li>速度20Km/H</li><li>支持摄影、手机控制套件</li><li>可选择越野胎或麦克纳姆轮胎</li></ul><h5 id="电气接口"><a href="#电气接口" class="headerlink" title="电气接口"></a>电气接口</h5><p>在 SCOUT MINI(OMNI)尾部简约的设计，所有的电气接口均在尾部。其接口包括电压显示交互模块、扩展接口、电源按键以及充电接口。各个模块在尾部的位置如图所示</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806154139.png" alt=""></p><p>SCOUT MINI(OMNI)配置的航空扩展接口既配置了一组电源也配置了一组<code>CAN 通讯接口</code>。便于使用者可给扩展设备提供电源，以及通讯使用。其具体引脚定义图所示</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806153259.png" alt=""></p><h5 id="产品尺寸"><a href="#产品尺寸" class="headerlink" title="产品尺寸"></a>产品尺寸</h5><p>麦轮版本：长 x 宽 x 高：625 × 585 × 222（mm ）</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806153627.png" alt=""></p><p>公路轮版本：长 x 宽 x 高：635 × 549 × 248（mm ）</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806154226.png" alt=""></p><p>导轨：欧标4040系列</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806155152.JPG" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806160345.PNG" alt=""></p><h5 id="产品介绍页"><a href="#产品介绍页" class="headerlink" title="产品介绍页"></a>产品介绍页</h5><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806155248.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200730115140.png" alt=""></p><h2 id="东莞市微宏智能科技有限公司"><a href="#东莞市微宏智能科技有限公司" class="headerlink" title="东莞市微宏智能科技有限公司"></a><strong>东莞市微宏智能科技有限公司</strong></h2><p>公司网站：<a href="http://wheeltec.net/" target="_blank" rel="noopener">http://wheeltec.net/</a></p><p>地址：东莞市松山湖中小科技企业创业园9栋二楼</p><p>电话： 0769-23832342</p><p>邮箱：<a href="mailto:passoni@126.com">passoni@126.com</a></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200730105836.png" alt=""></p><blockquote><p>前身是2015年成立（成都市）武侯区平衡小车之家电子元件经营部，是全国领先的自动化教学产品、科研平台供应商，公司拥有“平衡小车之家”“Ballbot”、“Ballplate”、“Waithome”等多个品牌。国内市场我们是领头羊，海外市场份额逐年上升，拥有多个专利和商标（含申请中）。公司和国内大多数工科院校建立长期稳定的合作关系，大部分产品都走进了高校实验室。公司是集研发、设计、生产、销售为一体的科技公司，技术实力十分雄厚，我们的愿景是为包括全国，甚至全球的客户提供卓越的科研教学产品，为每个员工提供学习、成长的机会。</p></blockquote><h3 id="候选产品-1"><a href="#候选产品-1" class="headerlink" title="候选产品"></a>候选产品</h3><h4 id="1-室外无人车"><a href="#1-室外无人车" class="headerlink" title="1.室外无人车"></a>1.室外无人车</h4><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200730105900.png" alt=""></p><p><img src= "/img/loading.gif" data-src="http://www.wheeltec.net/upload/202003/1583402194711350.jpg" alt="东莞微宏"></p><p><img src= "/img/loading.gif" data-src="http://www.wheeltec.net/upload/202003/1583402195845286.jpg" alt="东莞微宏"></p><p><img src= "/img/loading.gif" data-src="http://www.wheeltec.net/upload/202003/1583402194406874.jpg" alt="东莞微宏"></p><p>产品特点：载重能力可以达到35KG-85KG，自重20.5KG-22.3KG，可以定制化</p><h4 id="2-麦克纳姆轮小车"><a href="#2-麦克纳姆轮小车" class="headerlink" title="2.麦克纳姆轮小车"></a>2.麦克纳姆轮小车</h4><p><img src= "/img/loading.gif" data-src="http://wheeltec.net/upload/thumb_src/400_400/1583388871.jpg" alt="麦克纳姆轮小车"></p><p><img src= "/img/loading.gif" data-src="http://www.wheeltec.net/upload/202003/1583401417254442.jpg" alt="东莞微宏"></p><p>产品特点：</p><h4 id="3-摆式悬挂无轴承小车"><a href="#3-摆式悬挂无轴承小车" class="headerlink" title="3.摆式悬挂无轴承小车"></a>3.摆式悬挂无轴承小车</h4><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200730105918.png" alt=""></p><h5 id="产品参数-1"><a href="#产品参数-1" class="headerlink" title="产品参数"></a>产品参数</h5><table><thead><tr><th align="center">产品</th><th align="center">摆式悬挂无轴承小车</th></tr></thead><tbody><tr><td align="center">额定载重</td><td align="center">15KG</td></tr><tr><td align="center">最大速度</td><td align="center">1.2M/S</td></tr><tr><td align="center">悬挂形式</td><td align="center">摇臂独立悬架</td></tr><tr><td align="center">车体重量</td><td align="center">6.1KG</td></tr><tr><td align="center">最小转弯半径</td><td align="center">可原地转弯</td></tr><tr><td align="center">长 x 宽 x 高</td><td align="center">400 × 400 × 100（mm ）</td></tr><tr><td align="center">轴距 (mm)</td><td align="center">312</td></tr><tr><td align="center">轮距（mm）</td><td align="center">406</td></tr><tr><td align="center">充电时间</td><td align="center">-</td></tr><tr><td align="center">价格（裸车）</td><td align="center">RM2799-2999（RC遥控）</td></tr></tbody></table><h5 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h5><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806160336.png" alt=""></p><h5 id="产品特点-1"><a href="#产品特点-1" class="headerlink" title="产品特点"></a>产品特点</h5><ul><li><p>提供移动平台的完整源码和主控原理图。提供详细的通信协议和开发手册。无超声、无防跌落模块。激光雷达可选（提供地图构</p></li><li><p>铝合金开孔（可定制），方便安装搭载</p></li><li><p>续航能力：30分钟左右</p></li><li><p>最大速度1.2m/s。速度精度0.03m/s。旋转精度0.1rad/s</p></li><li><p>提供移动平台的完整源码和主控原理图。提供详细的通信协议和开发手册。无超声、无防跌落模块。激光雷达可选（提供地图构建）。到手即可用。</p></li></ul><h5 id="电气接口-1"><a href="#电气接口-1" class="headerlink" title="电气接口"></a>电气接口</h5><p>SWD接口、MicroUSB、TTL串口、CAN端口、手柄接口 </p><blockquote><p>公司未有提供详细的数据，本项为估计</p></blockquote><h5 id="产品尺寸-1"><a href="#产品尺寸-1" class="headerlink" title="产品尺寸"></a>产品尺寸</h5><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806160336.png" alt=""></p><p>导轨：欧标2020系列</p><p>产品特点：尺寸：400<em>400mm～1000</em>1000mm；重量：6.1kg；<br>最大负载：15kg（不含自重）<br>可改造程度：铝合金开孔（可定制），方便安装搭载<br>续航能力：30分钟左右；<br>速度：最大速度1.2m/s。速度精度0.03m/s。旋转精度0.1rad/s。<br>功能：提供移动平台的完整源码和主控原理图。提供详细的通信协议和开发手册。无超声、无防跌落模块。激光雷达可选（提供地图构建）。到手即可用。<br>价格：2799元～2999元（无激光雷达款）****</p><h2 id="初步机器人上层建筑构想"><a href="#初步机器人上层建筑构想" class="headerlink" title="初步机器人上层建筑构想"></a>初步机器人上层建筑构想</h2><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200731113235.png"/><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200731113233.png"/><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200731113234.png"/><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200806160345.PNG" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;松灵机器人&quot;&gt;&lt;a href=&quot;#松灵机器人&quot; class=&quot;headerlink&quot; title=&quot;松灵机器人&quot;&gt;&lt;/a&gt;松灵机器人&lt;/h2&gt;&lt;p&gt;官方网站：&lt;a href=&quot;http://www.agilex.ai/&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
    
    
      <category term="机器人" scheme="https://blog.dgut.top/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>你多久没有仰望夜空了</title>
    <link href="https://blog.dgut.top/2020/07/28/night-thinks/"/>
    <id>https://blog.dgut.top/2020/07/28/night-thinks/</id>
    <published>2020-07-28T05:48:10.000Z</published>
    <updated>2020-07-30T06:03:45.571Z</updated>
    
    <content type="html"><![CDATA[<p>对夜视的一些看法：</p><p>（以下为全彩色夜视仪的实际效果）</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200728134952.jpg" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200728134919.jpg" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200728135034.jpg" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200728142354.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200728142355.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200728142356.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200728142357.jpg" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200728135053.jpg" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200728162818.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对夜视的一些看法：&lt;/p&gt;
&lt;p&gt;（以下为全彩色夜视仪的实际效果）&lt;/p&gt;
&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/202
      
    
    </summary>
    
    
    
      <category term="game" scheme="https://blog.dgut.top/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>python利用opencv进行相机标定(完全版)</title>
    <link href="https://blog.dgut.top/2020/07/20/opencv-biaoding/"/>
    <id>https://blog.dgut.top/2020/07/20/opencv-biaoding/</id>
    <published>2020-07-20T06:55:32.000Z</published>
    <updated>2020-07-23T09:21:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天的低价单孔摄像机(照相机)会给图像带来很多畸变。畸变主要有两种:径向畸变和切想畸变。如下图所示,用红色直线将棋盘的两个边标注出来,但是你会发现棋盘的边界并不和红线重合。所有我们认为应该是直线的也都凸出来了。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200720160250.png" alt=""></p><p>在 3D 相关应用中,必须要先校正这些畸变。为了找到这些纠正参数,我们必须要提供一些包含明显图案模式的样本图片(比如说棋盘)。我们可以在上面找到一些特殊点(如棋盘的四个角点)。我们起到这些特殊点在图片中的位置以及它们的真是位置。有了这些信息,我们就可以使用数学方法求解畸变系数。这就是整个故事的摘要了。为了得到更好的结果,我们至少需要 10 个这样的图<br>案模式。</p><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><h2 id="拍摄棋盘图"><a href="#拍摄棋盘图" class="headerlink" title="拍摄棋盘图"></a>拍摄棋盘图</h2><p>首先打印下图：<a href="http://120.79.182.159:8000/f/9ad20d5debfb4aa68898/?dl=1" target="_blank" rel="noopener">下载</a> 也可直接保存</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200720160635.png" alt=""></p><p>将其固定到一个平面上，使用相机从不同角度，不同位置拍摄（10-20）张标定图。类似这样的：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200720160922.png" alt=""></p><p>python调用opencv相机拍照代码（例）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">camera=cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    (grabbed, img) = camera.read()</span><br><span class="line">    cv2.imshow(<span class="string">'img'</span>,img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'j'</span>):  <span class="comment"># 按j保存一张图片</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        u = str(i)</span><br><span class="line">        firename=str(<span class="string">'./img'</span>+u+<span class="string">'.jpg'</span>)</span><br><span class="line">        cv2.imwrite(firename, img)</span><br><span class="line">        print(<span class="string">'写入：'</span>,firename)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>按<code>j</code>拍摄图片，将会按照顺序批量保存，按<code>q</code>退出程序。</p><hr><h2 id="寻找棋盘图并且标定-检视标定后结果"><a href="#寻找棋盘图并且标定-检视标定后结果" class="headerlink" title="寻找棋盘图并且标定+检视标定后结果"></a>寻找棋盘图并且标定+检视标定后结果</h2><h3 id="利用opencv寻找棋盘"><a href="#利用opencv寻找棋盘" class="headerlink" title="利用opencv寻找棋盘"></a>利用opencv寻找棋盘</h3><p>为了找到棋盘的图案,我们要使用函数 cv2.findChessboardCorners()。我们还需要传入图案的类型,比如说 8x8 的格子或 5x5 的格子等。在本例中我们使用的9×6 的格子。(通常情况下棋盘都是 8x8 或者 7x7)。它会返回角点,如果得到图像的话返回值类型(Retval)就会是 True。这些角点会按顺序排列(从左到右,从上到下)</p><blockquote><p>这个函数可能不会找出所有图像中应有的图案。所以一个好的方法是编写代码,启动摄像机并在每一帧中检查是否有应有的图案。在我们获得图案之后我们要找到角点并把它们保存成一个列表。在读取下一帧图像之前要设置一定的间隔,这样我们就有足够的时间调整棋盘的方向。继续这个过程直到我们得到足够多好的图案。就算是我们举得这个例子,在所有的 14 幅图像中也不知道有几幅是好的。所以我们要读取每一张图像从其中找到好的能用的。</p></blockquote><blockquote><p>除 了 使 用 棋 盘 之 外, 我 们 还 可 以 使 用 环 形 格 子, 但 是 要 使 用 函 数<br>cv2.findCirclesGrid() 来找图案。据说使用环形格子只需要很少的图像<br>就可以了。</p></blockquote><p>在找到这些角点之后我们可以使用函数 cv2.cornerSubPix() 增加准确度。我们使用函数 cv2.drawChessboardCorners() 绘制图案。所有的这些步骤都被包含在下面的代码中了:</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200720161939.png" alt=""></p><h3 id="标定"><a href="#标定" class="headerlink" title="标定"></a>标定</h3><p>在得到了这些对象点和图像点之后,我们已经准备好来做摄像机标定了。我们要使用的函数是 cv2.calibrateCamera()。它会返回摄像机矩阵,畸变系数,旋转和变换向量等。</p><h3 id="畸变矫正"><a href="#畸变矫正" class="headerlink" title="畸变矫正"></a>畸变矫正</h3><p>现在我们找到我们想要的东西了,我们可以找到一幅图像来对他进行校正了。OpenCV 提供了两种方法,我们都学习一下。不过在那之前我们可以使用从函数 cv2.getOptimalNewCameraMatrix() 得到的自由缩放系数对摄像机矩阵进行优化。如果缩放系数 alpha = 0,返回的非畸变图像会带有最少量的不想要的像素。它甚至有可能在图像角点去除一些像素。如果 alpha = 1,所有的像素都会被返回,还有一些黑图像。它还会返回一个 ROI 图像,我们可以用来对结果进行裁剪。</p><p>函数:cv2.getOptimalNewCameraMatrix(mtx,dist,(w,h),<code>1</code>,(w,h))中参数<code>1</code>是个坑,</p><p>官方文档给的参数是<code>1</code>但是标定后的结果是一个球形的视角，我查了好久资料最后咨询了大佬才发现这个坑</p><p>这里我们使用cv2.getOptimalNewCameraMatrix(mtx,dist,(w,h),<code>0</code>,(w,h))参数设置为<code>0</code></p><h3 id="畸变到非畸变"><a href="#畸变到非畸变" class="headerlink" title="畸变到非畸变"></a>畸变到非畸变</h3><p>下面代码中</p><ul><li><p>dst1图像使用的是 cv2.undistort() 这是最简单的方法。只需使用这个函数和上边得到的 ROI 对结果进行裁剪</p></li><li><p>dst2图像使用的是remapping 这应该属于“曲线救国”了。首先我们要找到从畸变图像到非畸变图像的映射方程。再使用重映射方程。(代码中有详细用法)</p></li></ul><p>两种效果可以自行对比看看</p><p>纠正前后对比:</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200720163140.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200720163139.png" alt=""></p><h3 id="反向投影误差"><a href="#反向投影误差" class="headerlink" title="反向投影误差"></a>反向投影误差</h3><p>我们可以利用反向投影误差对我们找到的参数的准确性进行估计。得到的结果越接近 0 越好。有了内部参数,畸变参数和旋转变换矩阵,我们就可以使用 cv2.projectPoints() 将对象点转换到图像点。然后就可以计算变换得到图像与角点检测算法的绝对差了。然后我们计算所有标定图像的误差平均值。(但是本文不需要,所以没有将其写入)</p><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><p>需要的库:<code>opencv-python</code> <code>numpy</code> <code>glob</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找棋盘格角点</span></span><br><span class="line"><span class="comment"># 设置寻找亚像素角点的参数，采用的停止准则是最大循环次数30和最大误差容限0.001</span></span><br><span class="line">criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, <span class="number">30</span>, <span class="number">0.001</span>) <span class="comment"># 阈值</span></span><br><span class="line"><span class="comment">#棋盘格模板规格</span></span><br><span class="line">w = <span class="number">9</span>   <span class="comment"># 10 - 1</span></span><br><span class="line">h = <span class="number">6</span>   <span class="comment"># 7  - 1</span></span><br><span class="line"><span class="comment"># 世界坐标系中的棋盘格点,例如(0,0,0), (1,0,0), (2,0,0) ....,(8,5,0)，去掉Z坐标，记为二维矩阵</span></span><br><span class="line">objp = np.zeros((w*h,<span class="number">3</span>), np.float32)</span><br><span class="line">objp[:,:<span class="number">2</span>] = np.mgrid[<span class="number">0</span>:w,<span class="number">0</span>:h].T.reshape(<span class="number">-1</span>,<span class="number">2</span>)</span><br><span class="line">objp = objp*<span class="number">18.1</span>  <span class="comment"># 18.1 mm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 储存棋盘格角点的世界坐标和图像坐标对</span></span><br><span class="line">objpoints = [] <span class="comment"># 在世界坐标系中的三维点</span></span><br><span class="line">imgpoints = [] <span class="comment"># 在图像平面的二维点</span></span><br><span class="line"><span class="comment">#加载pic文件夹下所有的jpg图像</span></span><br><span class="line">images = glob.glob(<span class="string">'./*.jpg'</span>)  <span class="comment">#   拍摄的十几张棋盘图片所在目录</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> fname <span class="keyword">in</span> images:</span><br><span class="line"></span><br><span class="line">    img = cv2.imread(fname)</span><br><span class="line">    <span class="comment"># 获取画面中心点</span></span><br><span class="line">    <span class="comment">#获取图像的长宽</span></span><br><span class="line">    h1, w1 = img.shape[<span class="number">0</span>], img.shape[<span class="number">1</span>]</span><br><span class="line">    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">    u, v = img.shape[:<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># 找到棋盘格角点</span></span><br><span class="line">    ret, corners = cv2.findChessboardCorners(gray, (w,h),<span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># 如果找到足够点对，将其存储起来</span></span><br><span class="line">    <span class="keyword">if</span> ret == <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"i:"</span>, i)</span><br><span class="line">        i = i+<span class="number">1</span></span><br><span class="line">        <span class="comment"># 在原角点的基础上寻找亚像素角点</span></span><br><span class="line">        cv2.cornerSubPix(gray,corners,(<span class="number">11</span>,<span class="number">11</span>),(<span class="number">-1</span>,<span class="number">-1</span>),criteria)</span><br><span class="line">        <span class="comment">#追加进入世界三维点和平面二维点中</span></span><br><span class="line">        objpoints.append(objp)</span><br><span class="line">        imgpoints.append(corners)</span><br><span class="line">        <span class="comment"># 将角点在图像上显示</span></span><br><span class="line">        cv2.drawChessboardCorners(img, (w,h), corners, ret)</span><br><span class="line">        cv2.namedWindow(<span class="string">'findCorners'</span>, cv2.WINDOW_NORMAL)</span><br><span class="line">        cv2.resizeWindow(<span class="string">'findCorners'</span>, <span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line">        cv2.imshow(<span class="string">'findCorners'</span>,img)</span><br><span class="line">        cv2.waitKey(<span class="number">200</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"><span class="comment">#%% 标定</span></span><br><span class="line">print(<span class="string">'正在计算'</span>)</span><br><span class="line"><span class="comment">#标定</span></span><br><span class="line">ret, mtx, dist, rvecs, tvecs = \</span><br><span class="line">    cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::<span class="number">-1</span>], <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"ret:"</span>,ret  )</span><br><span class="line">print(<span class="string">"mtx:\n"</span>,mtx)      <span class="comment"># 内参数矩阵</span></span><br><span class="line">print(<span class="string">"dist畸变值:\n"</span>,dist   )   <span class="comment"># 畸变系数   distortion cofficients = (k_1,k_2,p_1,p_2,k_3)</span></span><br><span class="line">print(<span class="string">"rvecs旋转（向量）外参:\n"</span>,rvecs)   <span class="comment"># 旋转向量  # 外参数</span></span><br><span class="line">print(<span class="string">"tvecs平移（向量）外参:\n"</span>,tvecs  )  <span class="comment"># 平移向量  # 外参数</span></span><br><span class="line">newcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (u, v), <span class="number">0</span>, (u, v))</span><br><span class="line">print(<span class="string">'newcameramtx外参'</span>,newcameramtx)</span><br><span class="line"><span class="comment">#打开摄像机</span></span><br><span class="line">camera=cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    (grabbed,frame)=camera.read()</span><br><span class="line">    h1, w1 = frame.shape[:<span class="number">2</span>]</span><br><span class="line">    newcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (u, v), <span class="number">0</span>, (u, v))</span><br><span class="line">    <span class="comment"># 纠正畸变</span></span><br><span class="line">    dst1 = cv2.undistort(frame, mtx, dist, <span class="literal">None</span>, newcameramtx)</span><br><span class="line">    <span class="comment">#dst2 = cv2.undistort(frame, mtx, dist, None, newcameramtx)</span></span><br><span class="line">    mapx,mapy=cv2.initUndistortRectifyMap(mtx,dist,<span class="literal">None</span>,newcameramtx,(w1,h1),<span class="number">5</span>)</span><br><span class="line">    dst2=cv2.remap(frame,mapx,mapy,cv2.INTER_LINEAR)</span><br><span class="line">    <span class="comment"># 裁剪图像，输出纠正畸变以后的图片</span></span><br><span class="line">    x, y, w1, h1 = roi</span><br><span class="line">    dst1 = dst1[y:y + h1, x:x + w1]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#cv2.imshow('frame',dst2)</span></span><br><span class="line">    <span class="comment">#cv2.imshow('dst1',dst1)</span></span><br><span class="line">    cv2.imshow(<span class="string">'dst2'</span>, dst2)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):  <span class="comment"># 按q保存一张图片</span></span><br><span class="line">        cv2.imwrite(<span class="string">"../u4/frame.jpg"</span>, dst1)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">camera.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>代码放到图片相同的文件夹直接运行即可</p><h1 id="效果对比"><a href="#效果对比" class="headerlink" title="效果对比"></a>效果对比</h1><p>纠正前后:</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200720163313.png" alt=""><br><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200720163314.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200720163140.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200720163139.png" alt=""></p><p>相机标定完成~</p><div class="note success">            <p>success 标定完成的参数:</p>          </div><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>手头上这个相机镜头标定参数</span></div>    <div class="hide-content"><p>每个相机摄像头的情况都不同按需使用</p><p>dist=np.array(([[-0.58650416 , 0.59103816, -0.00443272 , 0.00357844 ,-0.27203275]]))<br>newcameramtx=np.array([[189.076828   ,  0.    ,     361.20126638]<br> ,[  0 ,2.01627296e+04 ,4.52759577e+02]<br> ,[0, 0, 1]])<br>mtx=np.array([[398.12724231  , 0.      ,   304.35638757],<br> [  0.       ,  345.38259888, 282.49861858],<br> [  0.,           0.,           1.        ]])<br>ret: 1.2796736596876943<br>rvecs旋转（向量）外参:<br> [array([[-0.1273159 ],<br>       [ 0.14990368],<br>       [-0.03444583]]), array([[-0.09406134],<br>       [ 0.00311094],<br>       [ 0.03877124]]), array([[ 0.46123299],<br>       [ 0.13606529],<br>       [-0.10644641]]), array([[-0.21371843],<br>       [ 0.19346393],<br>       [ 0.05795452]]), array([[-0.06136152],<br>       [-0.05609094],<br>       [-0.10779057]]), array([[-0.12671277],<br>       [ 0.19181691],<br>       [-0.01144501]]), array([[-0.10065723],<br>       [ 0.11067488],<br>       [-0.00420227]]), array([[-0.25254906],<br>       [ 0.05724545],<br>       [ 0.06326385]]), array([[ 0.06929893],<br>       [ 0.16462152],<br>       [-0.09935668]]), array([[ 0.32955811],<br>       [ 0.22348145],<br>       [-0.08321155]]), array([[ 0.0963841 ],<br>       [-0.05720288],<br>       [ 0.00220535]]), array([[-0.0885636 ],<br>       [-0.03092561],<br>       [ 0.03529275]]), array([[ 0.03313787],<br>       [-0.05300994],<br>       [-0.03433814]]), array([[-0.22302867],<br>       [ 0.18819738],<br>       [-0.03371187]]), array([[-0.19460224],<br>       [ 0.1036492 ],<br>       [ 0.03301566]]), array([[-0.27115415],<br>       [ 0.18957621],<br>       [-0.04709229]]), array([[-0.12627705],<br>       [ 0.0753438 ],<br>       [ 0.0761791 ]]), array([[ 0.15356268],<br>       [-0.02614756],<br>       [ 0.02406217]]), array([[ 0.69316168],<br>       [ 0.19622708],<br>       [-0.18706069]]), array([[-0.09555645],<br>       [ 0.02551495],<br>       [ 0.02218898]]), array([[-0.08255654],<br>       [-0.07209258],<br>       [ 0.04271465]]), array([[ 0.08770757],<br>       [-0.02304098],<br>       [-0.05008243]]), array([[ 0.58513697],<br>       [-0.00604693],<br>       [-0.1598063 ]]), array([[-0.07233849],<br>       [-0.04780769],<br>       [-0.06191515]]), array([[ 0.09651254],<br>       [ 0.02579441],<br>       [-0.00947478]]), array([[ 0.03501638],<br>       [-0.02501282],<br>       [-0.07304343]]), array([[-0.10470468],<br>       [ 0.21112561],<br>       [-0.0983761 ]]), array([[-0.12674786],<br>       [ 0.1432598 ],<br>       [-0.01007719]]), array([[-0.11004829],<br>       [ 0.06968173],<br>       [ 0.05585313]]), array([[-0.41743998],<br>       [ 0.17304611],<br>       [ 0.03084559]]), array([[-0.10236722],<br>       [ 0.01277654],<br>       [-0.03390285]]), array([[0.22726439],<br>       [0.14038084],<br>       [0.01124049]]), array([[-0.15304123],<br>       [ 0.04465005],<br>       [ 0.06240299]])]<br>tvecs平移（向量）外参:<br> [array([[145.08681235],<br>       [-76.17106891],<br>       [699.69778255]]), array([[-183.67717477],<br>       [-163.96393688],<br>       [ 688.85439168]]), array([[104.0920611 ],<br>       [ 23.92271463],<br>       [965.22859587]]), array([[ 15.24948656],<br>       [-54.85109955],<br>       [795.39600843]]), array([[ 198.06011875],<br>       [-175.91815396],<br>       [ 719.52217088]]), array([[  44.04717785],<br>       [-108.51372353],<br>       [ 788.45975705]]), array([[ -26.16828067],<br>       [-188.47275832],<br>       [ 771.99690841]]), array([[-139.14245711],<br>       [-124.82244434],<br>       [ 644.34844619]]), array([[ 95.41419669],<br>       [-22.10474336],<br>       [747.43156932]]), array([[-16.25541066],<br>       [-60.23640891],<br>       [677.13919736]]), array([[-220.34618611],<br>       [ -12.6889694 ],<br>       [ 708.18042632]]), array([[-205.93499674],<br>       [ -95.59986207],<br>       [ 709.15135801]]), array([[253.32869421],<br>       [-65.19615285],<br>       [793.36052372]]), array([[  8.6811058 ],<br>       [-18.70531877],<br>       [786.28091437]]), array([[-135.91340565],<br>       [ -41.83864798],<br>       [ 734.08050232]]), array([[-10.36373957],<br>       [-74.3822385 ],<br>       [775.58055384]]), array([[-181.85146859],<br>       [-162.51644736],<br>       [ 686.77992674]]), array([[-152.68145934],<br>       [ -45.11437087],<br>       [ 742.99524497]]), array([[  72.01815541],<br>       [-174.95234447],<br>       [ 954.17455852]]), array([[-180.90841277],<br>       [-186.78922299],<br>       [ 694.5911876 ]]), array([[-213.22423756],<br>       [-180.87955611],<br>       [ 668.22586979]]), array([[220.45960743],<br>       [ -3.88665195],<br>       [782.2584453 ]]), array([[-118.59571239],<br>       [ -51.01586357],<br>       [ 905.16719607]]), array([[ 213.87203907],<br>       [-198.38786649],<br>       [ 766.26267678]]), array([[197.15909792],<br>       [-11.90335064],<br>       [831.47489862]]), array([[220.76484713],<br>       [-60.95718003],<br>       [760.66883997]]), array([[117.86186858],<br>       [-64.75570632],<br>       [768.97222101]]), array([[ -39.59646337],<br>       [-165.78421993],<br>       [ 736.04088074]]), array([[-123.20719029],<br>       [-164.0644578 ],<br>       [ 743.43485414]]), array([[-19.65524135],<br>       [-69.18741504],<br>       [690.47472849]]), array([[-203.72891175],<br>       [ -20.1545843 ],<br>       [ 718.13434244]]), array([[ 40.16988244],<br>       [-68.66550898],<br>       [795.54461358]]), array([[-104.02162409],<br>       [-101.3265982 ],<br>       [ 762.41231116]])]<br>newcameramtx外参 [[578.70690918   0.         286.56697375]<br> [  0.         768.62420654 341.06051709]<br> [  0.           0.           1.        ]]</p></div></div><h1 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h1><ul><li>cameramtx：相机内参矩阵</li><li>dist：相机畸变参数</li><li>rvec：输出的旋转向量</li><li>tvec：输出的平移矩阵</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天的低价单孔摄像机(照相机)会给图像带来很多畸变。畸变主要有两种:径向畸变和切想畸变。如下图所示,用红色直线将棋盘的两个边标注出来,但是你会发现棋盘的边界并不和红线重合。所有我们认为应该是直线的也都凸出来了。&lt;/p&gt;
&lt;p&gt;&lt;img src= &quot;/img/loading.
      
    
    </summary>
    
    
    
      <category term="opencv" scheme="https://blog.dgut.top/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>python下使用aruco标记进进行检测</title>
    <link href="https://blog.dgut.top/2020/07/15/python-aruco/"/>
    <id>https://blog.dgut.top/2020/07/15/python-aruco/</id>
    <published>2020-07-15T00:51:43.000Z</published>
    <updated>2020-08-19T00:50:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200715114612.png" alt=""></p><a id="more"></a><h1 id="ArUco标记"><a href="#ArUco标记" class="headerlink" title="ArUco标记"></a>ArUco标记</h1><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200715093858.png" alt=""></p><p>首先什么是aruco标记呢？</p><p>aruco标记是可用于摄像机姿态估计的二进制方形基准标记。它的主要优点是检测简单、快速，并且具有很强的鲁棒性。ArUco 标记是由宽黑色边框和确定其标识符（id）的内部二进制矩阵组成的正方形标记。aruco标记的黑色边框有助于其在图像中的快速检测，内部二进制编码用于识别标记和提供错误检测和纠正。aruco标记尺寸的大小决定内部矩阵的大小，例如尺寸为 4x4 的标记由 16 位二进制数组成。</p><p>通俗地说，aruco标记其实就是一种编码，就和我们日常生活中的二维码是相似的，只不过由于编码方式的不同，导致它们存储信息的方式、容量等等有所差异，所以在应用层次上也会有所不同。由于单个aruco标记就可以提供足够的对应关系，例如有四个明显的角点及内部的二进制编码，所以aruco标记被广泛用来增加从二维世界映射到三维世界时的信息量，便于发现二维世界与三维世界之间的投影关系，从而实现姿态估计、相机矫正等等应用。</p><p>OpenCV中的ArUco模块包括了对aruco标记的创建和检测，以及将aruco标记用于姿势估计和相机矫正等应用的相关API，同时还提供了标记板等等。本次笔记中主要先整理aruco标记的创建与检测。</p><p>首先我们创建aruco标记时，需要先指定一个字典，这个字典表示的是创建出来的aruco标记具有怎样的尺寸、怎样的编码等等内容，我们使用APIgetPredefinedDictionary（）来声明我们使用的字典。在OpenCV中，提供了多种预定义字典，我们可以通过PREDEFINED_DICTIONARY_NAME来查看有哪些预定义字典。而且字典名称表示了该字典的aruco标记数量和尺寸，例如DICT_7X7_50表示一个包含了50种7x7位标记的字典。</p><hr><h1 id="ArUco标记生成器"><a href="#ArUco标记生成器" class="headerlink" title="ArUco标记生成器"></a>ArUco标记生成器</h1><p>在线aruco标记生成器：<a href="http://aruco.dgut.top/" target="_blank" rel="noopener">http://aruco.dgut.top/</a></p><p>（备用）：<a href="https://chev.me/arucogen/" target="_blank" rel="noopener">https://chev.me/arucogen/</a></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200715093013.png" alt=""></p><h1 id="在OpenCV中生成ArUco标记"><a href="#在OpenCV中生成ArUco标记" class="headerlink" title="在OpenCV中生成ArUco标记"></a>在OpenCV中生成ArUco标记</h1><h2 id="opencv-python生成aruco标记"><a href="#opencv-python生成aruco标记" class="headerlink" title="opencv-python生成aruco标记"></a>opencv-python生成aruco标记</h2><p>确定好我们需要的字典后，就可以通过API<code>drawMarker()</code>来绘制出aruco标记，其参数含义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 生成aruco标记</span></span><br><span class="line"><span class="comment"># 加载预定义的字典</span></span><br><span class="line">dictionary = cv2.aruco.Dictionary_get(cv2.aruco.DICT_6X6_250)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成标记</span></span><br><span class="line">markerImage = np.zeros((<span class="number">200</span>, <span class="number">200</span>), dtype=np.uint8)</span><br><span class="line">markerImage = cv2.aruco.drawMarker(dictionary, <span class="number">22</span>, <span class="number">200</span>, markerImage, <span class="number">1</span>)</span><br><span class="line">cv2.imwrite(<span class="string">"marker22.png"</span>, markerImage)</span><br></pre></td></tr></table></figure><blockquote><p>opencv的aruco模块共有25个预定义的标记词典。每个词典中所有的Aruco标记均包含相同数量的块或位(例如4×4、5×5、6×6或7×7)，且每个词典中Aruco标记的数量固定(例如50、100、250或1000)。</p></blockquote><p><code>cv2.aruco.Dictionary_get()</code>函数会加载<code>cv2.aruco.DICT_6X6_250</code>包含250个标记的字典，其中每个标记都是6×6位二进制模式</p><p><code>cv2.aruco.drawMarker(dictionary, 22, 200, markerImage, 1)</code>中的第二个参数<code>22</code>是aruco的标记id（0～249），第三个参数决定生成的标记的大小，在上面的示例中，它将生成<code>200×200</code>像素的图像，第四个参数表示将要存储aruco标记的对象(上面的<code>markerImage</code>），最后，第五个参数是边界宽度参数，它决定应将多少位（块）作为边界添加到生成的二进制图案中。</p><p>执行后将会生成这样的标记：标记id分别是<code>22</code></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200715091518.png" alt=""></p><details><summary>展开所支持的标记字典</summary><pre><code>展开查看的内容;DICT_4X4_50 Python: cv.aruco.DICT_4X4_50DICT_4X4_100 Python: cv.aruco.DICT_4X4_100DICT_4X4_250 Python: cv.aruco.DICT_4X4_250DICT_4X4_1000 Python: cv.aruco.DICT_4X4_1000DICT_5X5_50 Python: cv.aruco.DICT_5X5_50DICT_5X5_100 Python: cv.aruco.DICT_5X5_100DICT_5X5_250 Python: cv.aruco.DICT_5X5_250DICT_5X5_1000 Python: cv.aruco.DICT_5X5_1000DICT_6X6_50 Python: cv.aruco.DICT_6X6_50DICT_6X6_100 Python: cv.aruco.DICT_6X6_100DICT_6X6_250 Python: cv.aruco.DICT_6X6_250DICT_6X6_1000 Python: cv.aruco.DICT_6X6_1000DICT_7X7_50 Python: cv.aruco.DICT_7X7_50DICT_7X7_100 Python: cv.aruco.DICT_7X7_100DICT_7X7_250 Python: cv.aruco.DICT_7X7_250DICT_7X7_1000 Python: cv.aruco.DICT_7X7_1000DICT_ARUCO_ORIGINAL Python: cv.aruco.DICT_ARUCO_ORIGINALDICT_APRILTAG_16h5 Python: cv.aruco.DICT_APRILTAG_16h54x4 bits, minimum hamming distance between any two codes = 5, 30 codes</code></pre></details>-----<h2 id="批量生成aruco标记"><a href="#批量生成aruco标记" class="headerlink" title="批量生成aruco标记"></a>批量生成aruco标记</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 生成aruco标记</span></span><br><span class="line"><span class="comment"># 加载预定义的字典</span></span><br><span class="line">dictionary = cv2.aruco.Dictionary_get(cv2.aruco.DICT_6X6_250)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成标记</span></span><br><span class="line">markerImage = np.zeros((<span class="number">200</span>, <span class="number">200</span>), dtype=np.uint8)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    markerImage = cv2.aruco.drawMarker(dictionary, i, <span class="number">200</span>, markerImage, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    firename=<span class="string">'armark/'</span>+str(i)+<span class="string">'.png'</span></span><br><span class="line">    cv2.imwrite(firename, markerImage);</span><br></pre></td></tr></table></figure><p>在armark文件夹下会生成一系列的6*6 <code>aruco标记</code></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200716102446.png" alt=""></p><hr><h1 id="Aruco标记的检测和定位"><a href="#Aruco标记的检测和定位" class="headerlink" title="Aruco标记的检测和定位"></a>Aruco标记的检测和定位</h1><h2 id="静态检测"><a href="#静态检测" class="headerlink" title="静态检测"></a>静态检测</h2><p>在环境中图像检测Aruco标记，环境中有7个标记</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200716104948.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> cv2.aruco <span class="keyword">as</span> aruco</span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">frame=cv2.imread(<span class="string">'IMG_3739.jpg'</span>)</span><br><span class="line"><span class="comment">#调整图片大小</span></span><br><span class="line">frame=cv2.resize(frame,<span class="literal">None</span>,fx=<span class="number">0.2</span>,fy=<span class="number">0.2</span>,interpolation=cv2.INTER_CUBIC)</span><br><span class="line"><span class="comment">#灰度话</span></span><br><span class="line">gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment">#设置预定义的字典</span></span><br><span class="line">aruco_dict = aruco.Dictionary_get(aruco.DICT_6X6_250)</span><br><span class="line"><span class="comment">#使用默认值初始化检测器参数</span></span><br><span class="line">parameters =  aruco.DetectorParameters_create()</span><br><span class="line"><span class="comment">#使用aruco.detectMarkers()函数可以检测到marker，返回ID和标志板的4个角点坐标</span></span><br><span class="line">corners, ids, rejectedImgPoints = aruco.detectMarkers(gray,aruco_dict,parameters=parameters)</span><br><span class="line"><span class="comment">#画出标志位置</span></span><br><span class="line">aruco.drawDetectedMarkers(frame, corners,ids)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">"frame"</span>,frame)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><blockquote><p>对于每次成功检测到标记，将按从左上，右上，右下和左下的顺序检测标记的四个角点。在C ++中，将这4个检测到的角点存储为点矢量，并将图像中的多个标记一起存储在点矢量容器中。在Python中，它们存储为Numpy 数组。</p><p><code>detectMarkers()</code>函数用于检测和确定标记角点的位置。</p><ul><li>第一个参数<code>image</code>是带有标记的场景图像。</li><li>第二个参数<code>dictionary</code>是用于生成标记的字典。成功检测到的标记将存储在markerCorners中，其ID存储在markerIds中。先前初始化的DetectorParameters对象作为传递参数。</li><li>第三个参数<code>parameters</code>： <code>DetectionParameters</code> 类的对象，该对象包括在检测过程中可以自定义的所有参数；</li><li>返回参数<code>corners</code>：检测到的aruco标记的角点列表，对于每个标记，其四个角点均按其原始顺序返回（从右上角开始顺时针旋转），第一个角是右上角，然后是右下角，左下角和左上角。</li><li>返回<code>ids</code>：检测到的每个标记的 id，需要注意的是第三个参数和第四个参数具有相同的大小；</li><li>返回参数<code>rejectedImgPoints</code>：抛弃的候选标记列表，即检测到的、但未提供有效编码的正方形。每个候选标记也由其四个角定义，其格式与第三个参数相同，该参数若无特殊要求可以省略。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">corners, ids, rejectedImgPoints = aruco.detectMarkers(gray,aruco_dict,parameters=parameters)</span><br></pre></td></tr></table></figure><p>当我们检测到aruco标签之后,为了方便观察,我们需要进行可视化操作,把标签标记出来:使用<code>drawDetectedMarkers（）</code>这个API来绘制检测到的aruco标记，其参数含义如下：</p><blockquote><ul><li>参数image: 是将绘制标记的输入 / 输出图像（通常就是检测到标记的图像）</li><li>参数corners：检测到的aruco标记的角点列表</li><li>参数ids：检测到的每个标记对应到其所属字典中的id,可选（如果未提供）不会绘制ID。</li><li>参数borderColor：绘制标记外框的颜色,其余颜色（文本颜色和第一个角颜色）将基于该颜色进行计算，以提高可视化效果。</li><li>无返回值</li></ul></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aruco.draw<span class="constructor">DetectedMarkers(<span class="params">image</span>, <span class="params">corners</span>,<span class="params">ids</span>,<span class="params">borderColor</span>)</span></span><br></pre></td></tr></table></figure><p>效果演示：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200716105125.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200716111938.png" alt=""><br><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200716111939.png" alt=""><br><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200716111940.png" alt=""></p><h2 id="动态检测"><a href="#动态检测" class="headerlink" title="动态检测"></a>动态检测</h2><p>利用摄像头进行一个实时动态监测aruco标记并且估计姿势，摄像头的内参需要提前标定，如何标定请看我<a href="https://blog.dgut.top/2020/07/20/opencv-biaoding/">另一篇文章</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> cv2.aruco <span class="keyword">as</span> aruco</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mtx = np.array([</span></span><br><span class="line"><span class="comment">#         [2946.48,       0, 1980.53],</span></span><br><span class="line"><span class="comment">#         [      0, 2945.41, 1129.25],</span></span><br><span class="line"><span class="comment">#         [      0,       0,       1],</span></span><br><span class="line"><span class="comment">#         ])</span></span><br><span class="line"><span class="comment"># #我的手机拍棋盘的时候图片大小是 4000 x 2250</span></span><br><span class="line"><span class="comment"># #ip摄像头拍视频的时候设置的是 1920 x 1080，长宽比是一样的，</span></span><br><span class="line"><span class="comment"># #ip摄像头设置分辨率的时候注意一下</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># dist = np.array( [0.226317, -1.21478, 0.00170689, -0.000334551, 1.9892] )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#相机纠正参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dist=np.array(([[-0.51328742,  0.33232725 , 0.01683581 ,-0.00078608, -0.1159959]]))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># mtx=np.array([[464.73554153, 0.00000000e+00 ,323.989155],</span></span><br><span class="line"><span class="comment">#  [  0.,         476.72971528 ,210.92028],</span></span><br><span class="line"><span class="comment">#  [  0.,           0.,           1.        ]])</span></span><br><span class="line">dist=np.array(([[<span class="number">-0.58650416</span> , <span class="number">0.59103816</span>, <span class="number">-0.00443272</span> , <span class="number">0.00357844</span> ,<span class="number">-0.27203275</span>]]))</span><br><span class="line">newcameramtx=np.array([[<span class="number">189.076828</span>   ,  <span class="number">0.</span>    ,     <span class="number">361.20126638</span>]</span><br><span class="line"> ,[  <span class="number">0</span> ,<span class="number">2.01627296e+04</span> ,<span class="number">4.52759577e+02</span>]</span><br><span class="line"> ,[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">mtx=np.array([[<span class="number">398.12724231</span>  , <span class="number">0.</span>      ,   <span class="number">304.35638757</span>],</span><br><span class="line"> [  <span class="number">0.</span>       ,  <span class="number">345.38259888</span>, <span class="number">282.49861858</span>],</span><br><span class="line"> [  <span class="number">0.</span>,           <span class="number">0.</span>,           <span class="number">1.</span>        ]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">font = cv2.FONT_HERSHEY_SIMPLEX <span class="comment">#font for displaying text (below)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#num = 0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    h1, w1 = frame.shape[:<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># 读取摄像头画面</span></span><br><span class="line">    <span class="comment"># 纠正畸变</span></span><br><span class="line">    newcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (h1, w1), <span class="number">0</span>, (h1, w1))</span><br><span class="line">    dst1 = cv2.undistort(frame, mtx, dist, <span class="literal">None</span>, newcameramtx)</span><br><span class="line">    x, y, w1, h1 = roi</span><br><span class="line">    dst1 = dst1[y:y + h1, x:x + w1]</span><br><span class="line">    frame=dst1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    aruco_dict = aruco.Dictionary_get(aruco.DICT_6X6_250)</span><br><span class="line">    parameters =  aruco.DetectorParameters_create()</span><br><span class="line">    dst1 = cv2.undistort(frame, mtx, dist, <span class="literal">None</span>, newcameramtx)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    detectMarkers(...)</span></span><br><span class="line"><span class="string">        detectMarkers(image, dictionary[, corners[, ids[, parameters[, rejectedI</span></span><br><span class="line"><span class="string">        mgPoints]]]]) -&gt; corners, ids, rejectedImgPoints</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用aruco.detectMarkers()函数可以检测到marker，返回ID和标志板的4个角点坐标</span></span><br><span class="line">    corners, ids, rejectedImgPoints = aruco.detectMarkers(gray,aruco_dict,parameters=parameters)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    如果找不打id</span></span><br><span class="line">    <span class="keyword">if</span> ids <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">        rvec, tvec, _ = aruco.estimatePoseSingleMarkers(corners, <span class="number">0.05</span>, mtx, dist)</span><br><span class="line">        <span class="comment"># 估计每个标记的姿态并返回值rvet和tvec ---不同</span></span><br><span class="line">        <span class="comment"># from camera coeficcients</span></span><br><span class="line">        (rvec-tvec).any() <span class="comment"># get rid of that nasty numpy value array error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#        aruco.drawAxis(frame, mtx, dist, rvec, tvec, 0.1) #绘制轴</span></span><br><span class="line"><span class="comment">#        aruco.drawDetectedMarkers(frame, corners) #在标记周围画一个正方形</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(rvec.shape[<span class="number">0</span>]):</span><br><span class="line">            aruco.drawAxis(frame, mtx, dist, rvec[i, :, :], tvec[i, :, :], <span class="number">0.03</span>)</span><br><span class="line">            aruco.drawDetectedMarkers(frame, corners)</span><br><span class="line">        <span class="comment">###### DRAW ID #####</span></span><br><span class="line">        cv2.putText(frame, <span class="string">"Id: "</span> + str(ids), (<span class="number">0</span>,<span class="number">64</span>), font, <span class="number">1</span>, (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>,cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">##### DRAW "NO IDS" #####</span></span><br><span class="line">        cv2.putText(frame, <span class="string">"No Ids"</span>, (<span class="number">0</span>,<span class="number">64</span>), font, <span class="number">1</span>, (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>,cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示结果框架</span></span><br><span class="line">    cv2.imshow(<span class="string">"frame"</span>,frame)</span><br><span class="line"></span><br><span class="line">    key = cv2.waitKey(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> key == <span class="number">27</span>:         <span class="comment"># 按esc键退出</span></span><br><span class="line">        print(<span class="string">'esc break...'</span>)</span><br><span class="line">        cap.release()</span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> key == ord(<span class="string">' '</span>):   <span class="comment"># 按空格键保存</span></span><br><span class="line"><span class="comment">#        num = num + 1</span></span><br><span class="line"><span class="comment">#        filename = "frames_%s.jpg" % num  # 保存一张图像</span></span><br><span class="line">        filename = str(time.time())[:<span class="number">10</span>] + <span class="string">".jpg"</span></span><br><span class="line">        cv2.imwrite(filename, frame)</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200715113014.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200715113031.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200715113042.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200716120123.png" alt=""></p><h1 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h1><h2 id="相机标定，并且写入文件保存标定文件"><a href="#相机标定，并且写入文件保存标定文件" class="headerlink" title="相机标定，并且写入文件保存标定文件"></a>相机标定，并且写入文件保存标定文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.patches <span class="keyword">as</span> patches</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找棋盘格角点标定并且写入文件</span></span><br><span class="line"></span><br><span class="line">criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, <span class="number">30</span>, <span class="number">0.001</span>) <span class="comment"># 阈值</span></span><br><span class="line"><span class="comment">#棋盘格模板规格</span></span><br><span class="line">w = <span class="number">9</span>   <span class="comment"># 10 - 1</span></span><br><span class="line">h = <span class="number">6</span>   <span class="comment"># 7  - 1</span></span><br><span class="line"><span class="comment"># 世界坐标系中的棋盘格点,例如(0,0,0), (1,0,0), (2,0,0) ....,(8,5,0)，去掉Z坐标，记为二维矩阵</span></span><br><span class="line">objp = np.zeros((w*h,<span class="number">3</span>), np.float32)</span><br><span class="line">objp[:,:<span class="number">2</span>] = np.mgrid[<span class="number">0</span>:w,<span class="number">0</span>:h].T.reshape(<span class="number">-1</span>,<span class="number">2</span>)</span><br><span class="line">objp = objp*<span class="number">18.1</span>  <span class="comment"># 18.1 mm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 储存棋盘格角点的世界坐标和图像坐标对</span></span><br><span class="line">objpoints = [] <span class="comment"># 在世界坐标系中的三维点</span></span><br><span class="line">imgpoints = [] <span class="comment"># 在图像平面的二维点</span></span><br><span class="line"></span><br><span class="line">images = glob.glob(<span class="string">'./pic/*.jpg'</span>)  <span class="comment">#   拍摄的十几张棋盘图片所在目录</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> fname <span class="keyword">in</span> images:</span><br><span class="line"></span><br><span class="line">    img = cv2.imread(fname)</span><br><span class="line">    <span class="comment"># 获取画面中心点</span></span><br><span class="line"></span><br><span class="line">    h1, w1 = img.shape[<span class="number">0</span>], img.shape[<span class="number">1</span>]</span><br><span class="line">    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">    u, v = img.shape[:<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># 找到棋盘格角点</span></span><br><span class="line">    ret, corners = cv2.findChessboardCorners(gray, (w,h),<span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># 如果找到足够点对，将其存储起来</span></span><br><span class="line">    <span class="keyword">if</span> ret == <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"i:"</span>, i)</span><br><span class="line">        i = i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        cv2.cornerSubPix(gray,corners,(<span class="number">11</span>,<span class="number">11</span>),(<span class="number">-1</span>,<span class="number">-1</span>),criteria)</span><br><span class="line">        objpoints.append(objp)</span><br><span class="line">        imgpoints.append(corners)</span><br><span class="line">        <span class="comment"># 将角点在图像上显示</span></span><br><span class="line">        cv2.drawChessboardCorners(img, (w,h), corners, ret)</span><br><span class="line">        cv2.namedWindow(<span class="string">'findCorners'</span>, cv2.WINDOW_NORMAL)</span><br><span class="line">        cv2.resizeWindow(<span class="string">'findCorners'</span>, <span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line">        cv2.imshow(<span class="string">'findCorners'</span>,img)</span><br><span class="line">        cv2.waitKey(<span class="number">200</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"><span class="comment">#%% 标定</span></span><br><span class="line">print(<span class="string">'正在计算'</span>)</span><br><span class="line">ret, mtx, dist, rvecs, tvecs = \</span><br><span class="line">    cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::<span class="number">-1</span>], <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">cv_file=cv2.FileStorage(<span class="string">"camera.yaml"</span>,cv2.FILE_STORAGE_WRITE)</span><br><span class="line">cv_file.write(<span class="string">"camera_matrix"</span>,mtx)</span><br><span class="line">cv_file.write(<span class="string">"dist_coeff"</span>,dist)</span><br><span class="line"><span class="comment"># 请注意，*释放*不会关闭（）FileStorage对象</span></span><br><span class="line"></span><br><span class="line">cv_file.release()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"ret:"</span>,ret  )</span><br><span class="line">print(<span class="string">"mtx:\n"</span>,mtx)      <span class="comment"># 内参数矩阵</span></span><br><span class="line">print(<span class="string">"dist畸变值:\n"</span>,dist   )   <span class="comment"># 畸变系数   distortion cofficients = (k_1,k_2,p_1,p_2,k_3)</span></span><br><span class="line">print(<span class="string">"rvecs旋转（向量）外参:\n"</span>,rvecs)   <span class="comment"># 旋转向量  # 外参数</span></span><br><span class="line">print(<span class="string">"tvecs平移（向量）外参:\n"</span>,tvecs  )  <span class="comment"># 平移向量  # 外参数</span></span><br><span class="line">newcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (u, v), <span class="number">0</span>, (u, v))</span><br><span class="line">print(<span class="string">'newcameramtx外参'</span>,newcameramtx)</span><br><span class="line">camera=cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dist=np.array(([[-0.3918239532375715, 0.1553689004591761, 0.001069066277469635, 2.175204930902934e-06, -0.02850420360197434]]))</span></span><br><span class="line"><span class="comment"># # newcameramtx=np.array([[1.85389837e+04 ,0.00000000e+00, 5.48743017e+02]</span></span><br><span class="line"><span class="comment"># #  ,[  0 ,2.01627296e+04 ,4.52759577e+02]</span></span><br><span class="line"><span class="comment"># #  ,[0, 0, 1]])</span></span><br><span class="line"><span class="comment"># mtx=np.array([[379.1368428730273, 0, 312.1210537268028],</span></span><br><span class="line"><span class="comment">#  [  0, 381.6396537294123, 242.492484246843],</span></span><br><span class="line"><span class="comment">#  [  0.,           0.,           1.        ]])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    (grabbed,frame)=camera.read()</span><br><span class="line">    h1, w1 = frame.shape[:<span class="number">2</span>]</span><br><span class="line">    <span class="comment">#打开标定文件</span></span><br><span class="line">    cv_file = cv2.FileStorage(<span class="string">"camera.yaml"</span>, cv2.FILE_STORAGE_READ)</span><br><span class="line">    camera_matrix = cv_file.getNode(<span class="string">"camera_matrix"</span>).mat()</span><br><span class="line">    dist_matrix = cv_file.getNode(<span class="string">"dist_coeff"</span>).mat()</span><br><span class="line">    cv_file.release()</span><br><span class="line"></span><br><span class="line">    newcameramtx, roi = cv2.getOptimalNewCameraMatrix(camera_matrix, dist_matrix, (u, v), <span class="number">0</span>, (u, v))</span><br><span class="line">    <span class="comment"># 纠正畸变</span></span><br><span class="line">    dst1 = cv2.undistort(frame, camera_matrix, dist_matrix, <span class="literal">None</span>, newcameramtx)</span><br><span class="line">    <span class="comment">#dst2 = cv2.undistort(frame, mtx, dist, None, newcameramtx)</span></span><br><span class="line">    mapx,mapy=cv2.initUndistortRectifyMap(camera_matrix,dist_matrix,<span class="literal">None</span>,newcameramtx,(w1,h1),<span class="number">5</span>)</span><br><span class="line">    dst2=cv2.remap(frame,mapx,mapy,cv2.INTER_LINEAR)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 裁剪图像，输出纠正畸变以后的图片</span></span><br><span class="line">    x, y, w1, h1 = roi</span><br><span class="line">    dst1 = dst1[y:y + h1, x:x + w1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">'dst1'</span>,dst1)</span><br><span class="line">    <span class="comment">#cv2.imshow('dst2', dst2)</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):  <span class="comment"># 按q保存一张图片</span></span><br><span class="line">        cv2.imwrite(<span class="string">"../u4/frame.jpg"</span>, dst1)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">camera.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="利用标定文件检测aruco标签"><a href="#利用标定文件检测aruco标签" class="headerlink" title="利用标定文件检测aruco标签"></a>利用标定文件检测aruco标签</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> cv2.aruco <span class="keyword">as</span> aruco</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#加载相机纠正参数</span></span><br><span class="line">cv_file = cv2.FileStorage(<span class="string">"yuyan.yaml"</span>, cv2.FILE_STORAGE_READ)</span><br><span class="line">camera_matrix = cv_file.getNode(<span class="string">"camera_matrix"</span>).mat()</span><br><span class="line">dist_matrix = cv_file.getNode(<span class="string">"dist_coeff"</span>).mat()</span><br><span class="line">cv_file.release()</span><br><span class="line"></span><br><span class="line"><span class="comment"># dist=np.array(([[-0.51328742,  0.33232725 , 0.01683581 ,-0.00078608, -0.1159959]]))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># mtx=np.array([[464.73554153, 0.00000000e+00 ,323.989155],</span></span><br><span class="line"><span class="comment">#  [  0.,         476.72971528 ,210.92028],</span></span><br><span class="line"><span class="comment">#  [  0.,           0.,           1.        ]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dist=np.array(([[-0.58650416 , 0.59103816, -0.00443272 , 0.00357844 ,-0.27203275]]))</span></span><br><span class="line"><span class="comment"># newcameramtx=np.array([[189.076828   ,  0.    ,     361.20126638]</span></span><br><span class="line"><span class="comment">#  ,[  0 ,2.01627296e+04 ,4.52759577e+02]</span></span><br><span class="line"><span class="comment">#  ,[0, 0, 1]])</span></span><br><span class="line"><span class="comment"># mtx=np.array([[398.12724231  , 0.      ,   304.35638757],</span></span><br><span class="line"><span class="comment">#  [  0.       ,  345.38259888, 282.49861858],</span></span><br><span class="line"><span class="comment">#  [  0.,           0.,           1.        ]])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">font = cv2.FONT_HERSHEY_SIMPLEX <span class="comment">#font for displaying text (below)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#num = 0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    h1, w1 = frame.shape[:<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># 读取摄像头画面</span></span><br><span class="line">    <span class="comment"># 纠正畸变</span></span><br><span class="line">    newcameramtx, roi = cv2.getOptimalNewCameraMatrix(camera_matrix, dist_matrix, (h1, w1), <span class="number">0</span>, (h1, w1))</span><br><span class="line">    dst1 = cv2.undistort(frame, camera_matrix, dist_matrix, <span class="literal">None</span>, newcameramtx)</span><br><span class="line">    x, y, w1, h1 = roi</span><br><span class="line">    dst1 = dst1[y:y + h1, x:x + w1]</span><br><span class="line">    frame=dst1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    aruco_dict = aruco.Dictionary_get(aruco.DICT_6X6_250)</span><br><span class="line">    parameters =  aruco.DetectorParameters_create()</span><br><span class="line">    <span class="comment">#dst1 = cv2.undistort(frame, mtx, dist, None, newcameramtx)</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    detectMarkers(...)</span></span><br><span class="line"><span class="string">        detectMarkers(image, dictionary[, corners[, ids[, parameters[, rejectedI</span></span><br><span class="line"><span class="string">        mgPoints]]]]) -&gt; corners, ids, rejectedImgPoints</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用aruco.detectMarkers()函数可以检测到marker，返回ID和标志板的4个角点坐标</span></span><br><span class="line">    corners, ids, rejectedImgPoints = aruco.detectMarkers(gray,aruco_dict,parameters=parameters)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    如果找不打id</span></span><br><span class="line">    <span class="keyword">if</span> ids <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">        rvec, tvec, _ = aruco.estimatePoseSingleMarkers(corners, <span class="number">0.05</span>, camera_matrix, dist_matrix)</span><br><span class="line">        <span class="comment"># 估计每个标记的姿态并返回值rvet和tvec ---不同</span></span><br><span class="line">        <span class="comment"># from camera coeficcients</span></span><br><span class="line">        (rvec-tvec).any() <span class="comment"># get rid of that nasty numpy value array error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#        aruco.drawAxis(frame, mtx, dist, rvec, tvec, 0.1) #绘制轴</span></span><br><span class="line"><span class="comment">#        aruco.drawDetectedMarkers(frame, corners) #在标记周围画一个正方形</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(rvec.shape[<span class="number">0</span>]):</span><br><span class="line">            aruco.drawAxis(frame, camera_matrix, dist_matrix, rvec[i, :, :], tvec[i, :, :], <span class="number">0.03</span>)</span><br><span class="line">            aruco.drawDetectedMarkers(frame, corners,ids)</span><br><span class="line">        <span class="comment">###### DRAW ID #####</span></span><br><span class="line">        cv2.putText(frame, <span class="string">"Id: "</span> + str(ids), (<span class="number">0</span>,<span class="number">64</span>), font, <span class="number">1</span>, (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>,cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">##### DRAW "NO IDS" #####</span></span><br><span class="line">        cv2.putText(frame, <span class="string">"No Ids"</span>, (<span class="number">0</span>,<span class="number">64</span>), font, <span class="number">1</span>, (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>,cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示结果框架</span></span><br><span class="line">    cv2.imshow(<span class="string">"frame"</span>,frame)</span><br><span class="line"></span><br><span class="line">    key = cv2.waitKey(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> key == <span class="number">27</span>:         <span class="comment"># 按esc键退出</span></span><br><span class="line">        print(<span class="string">'esc break...'</span>)</span><br><span class="line">        cap.release()</span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> key == ord(<span class="string">' '</span>):   <span class="comment"># 按空格键保存</span></span><br><span class="line"><span class="comment">#        num = num + 1</span></span><br><span class="line"><span class="comment">#        filename = "frames_%s.jpg" % num  # 保存一张图像</span></span><br><span class="line">        filename = str(time.time())[:<span class="number">10</span>] + <span class="string">".jpg"</span></span><br><span class="line">        cv2.imwrite(filename, frame)</span><br></pre></td></tr></table></figure><p>其中<code>yuyan.yaml</code>为保存的标定文件，利用cv2.FileStorage(“yuyan.yaml”, cv2.FILE_STORAGE_READ)及cv_file.getNode(“camera_matrix”).mat()加载</p><p>本文参考：</p><p>1.<a href="https://blog.csdn.net/sinat_17456165/article/details/105649131" target="_blank" rel="noopener">https://blog.csdn.net/sinat_17456165/article/details/105649131</a></p><p>2.<a href="https://www.learnopencv.com/augmented-reality-using-aruco-markers-in-opencv-c-python/" target="_blank" rel="noopener">https://www.learnopencv.com/augmented-reality-using-aruco-markers-in-opencv-c-python/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/usg1024/imgshow/raw/master/img/20200715114612.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="opencv" scheme="https://blog.dgut.top/tags/opencv/"/>
    
      <category term="aruco" scheme="https://blog.dgut.top/tags/aruco/"/>
    
      <category term="python" scheme="https://blog.dgut.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>git的使用firebase+github pagse同时提交博客</title>
    <link href="https://blog.dgut.top/2020/07/14/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.dgut.top/2020/07/14/git%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-07-14T06:58:34.000Z</published>
    <updated>2020-07-17T16:56:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200714154834.png" alt=""></p><a id="more"></a><p>firebase的访问一直不稳定，所以还是在github pagse上面也同步一份博客的内容吧</p><h1 id="git的使用记录"><a href="#git的使用记录" class="headerlink" title="git的使用记录"></a>git的使用记录</h1><p>感谢一下<a href="https://magidrag0n.github.io/" target="_blank" rel="noopener">@magidrag0n</a>大佬的教学</p><ul><li><p>首先在你的github创立一个名叫：<code>你的github用户名</code>+ <code>github.io</code>的仓库</p><ul><li>我的github用户名叫<code>zengwenjian123</code>所以我建立的仓库名叫：<code>zengwenjian123.github.io</code></li></ul><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200714151120.png" alt=""></p></li><li><p>然后命令行进入到博客的文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo </span><br><span class="line"><span class="comment">#进入博客更目录</span></span><br></pre></td></tr></table></figure></li><li><p>安装插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li><li><p>打开站点配置文件<code>_config</code></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200714151700.png" alt=""></p><ul><li><p>在最下面添加一个函数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">'git'</span></span><br><span class="line">  repo: <span class="string">'https://github.com/ZengWenJian123/ZengWenJian123.github.io'</span></span><br><span class="line">  branch: <span class="string">'master'</span></span><br></pre></td></tr></table></figure><p>这里填入的是你自己的仓库路径</p></li></ul></li></ul><p>  <img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200714151915.png" alt=""></p><ul><li><p>运行设置账户名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">"you@example.com"</span></span><br><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br></pre></td></tr></table></figure><p>来设置您账号的缺省身份标识</p></li><li><p>然后运行hexo三连：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>提示输入username for github时输入你的github登录邮箱</p><p>提示输入password for github时输入你的github登录密码</p><p>输入指令记住账户和密码（不用每次部署的时候再次输入）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure></li><li><p>你的hexo博客下的<code>public</code>文件夹将会上传到github仓库了</p></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200714152551.png" alt=""></p><ul><li>现在访问<a href="https://zengwenjian123.github.io/" target="_blank" rel="noopener">https://zengwenjian123.github.io/</a> 将可以访问到你的博客(说好的google firebase真香呢？)</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200714152824.png" alt=""></p><ul><li>博客部署github pasges完成</li></ul><hr><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>Username for ‘<a href="https://github.com&#39;" target="_blank" rel="noopener">https://github.com&#39;</a>: 输入的是github上的邮箱账号, 而不是github中设置的username, 这是个巨坑!!!<br>Password for ‘https://你的github邮箱@github.com’: 输入github的登录密码,点击enter键即可.</p><p>利用下面的代码记住账户和密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><hr><h1 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h1><p>设置短命令：</p><p>令在ubuntu的环境下可以使用短命令来执行一键将静态博客页面部署到github</p><p>首先打开你个人目录下的.bashrc隐藏文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment">#把光标移到末尾按’i’键插入一行</span></span><br><span class="line"><span class="built_in">alias</span> gdd=<span class="string">'hexo clean &amp;&amp; hexo g &amp;&amp; hexo d'</span></span><br></pre></td></tr></table></figure><blockquote><p>然后按’Esc’后按’:wq’保存退出</p></blockquote><ul><li><p>最后在终端输入命令生效刚刚的更改就完事了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200714153734.png" alt=""></p><p><code>gdd</code>（搞大点）就是短命令名，每当输入<code>gdd</code>将自动执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署三连</p><table><thead><tr><th>firebase 托管</th><th><a href="https://usg-cn.web.app/" target="_blank" rel="noopener">https://usg-cn.web.app/</a></th></tr></thead><tbody><tr><td>github 托管</td><td><a href="https://zengwenjian123.github.io/" target="_blank" rel="noopener">https://zengwenjian123.github.io/</a></td></tr></tbody></table><p>这两个blog将会同时更新</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/usg1024/imgshow/raw/master/img/20200714154834.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="博客" scheme="https://blog.dgut.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="git" scheme="https://blog.dgut.top/tags/git/"/>
    
      <category term="hexo" scheme="https://blog.dgut.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客收录百度和谷歌2020.7.14更新</title>
    <link href="https://blog.dgut.top/2020/07/13/google/"/>
    <id>https://blog.dgut.top/2020/07/13/google/</id>
    <published>2020-07-13T14:36:25.000Z</published>
    <updated>2020-07-17T16:57:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>博客已经搭建成功了一段时间了，并且添加了一些博文，不过看到博客底部的访客人数还是感觉特别寒酸，为了使博客的曝光读提高，所以就考虑主动让百度或者谷歌等搜索引擎收录。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713171218.png" alt=""></p><a id="more"></a><h1 id="首先确认站点是否已经被收录了"><a href="#首先确认站点是否已经被收录了" class="headerlink" title="首先确认站点是否已经被收录了"></a>首先确认站点是否已经被收录了</h1><p>我的博客地址为：<code>usg-cn.web.app</code>所以可以在百度和谷歌输入下面的格式来判断站点是否已经被收录了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:usg-cn.web.app/</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713171516.png" alt=""><br><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713171517.png" alt=""></p><p>百度的没有，谷歌已经收录了</p><blockquote><p>研究了好久，总感觉百度的搜索蜘蛛效果比谷歌的差一点，新网站谷歌很快就收录了，百度要等好久。</p></blockquote><p>站点还没有被收录就继续下列步骤</p><h1 id="安装扩展插件"><a href="#安装扩展插件" class="headerlink" title="安装扩展插件"></a>安装扩展插件</h1><blockquote><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p></blockquote><p>在你的hexo博客根目录，用下面2个命令分别安装谷歌、百度所对应的站点地图生成文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>在博客目录的_config.yml中添加如下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动生成sitemap</span></span><br><span class="line"><span class="comment"># sitemap</span></span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><p>编译你的博客</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>然后你可以看到在你博客下的<code>public</code>目录下生成了<code>sitemap.xml</code>以及<code>baidusitemap.xml</code>文件，这样就大功告成了。<code>sitemap.xml</code>是提交给谷歌的、<code>baidusitemap.xml</code>是提交给百度的。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200714082740.png" alt=""></p><p>部署后你分别访问<br><a href="https://usg-cn.web.app/sitemap.xml" target="_blank" rel="noopener">https://usg-cn.web.app/sitemap.xml</a></p><p><a href="https://usg-cn.web.app/baidusitemap.xml" target="_blank" rel="noopener">https://usg-cn.web.app/baidusitemap.xml</a></p><p>看到如下画面就证明已经成功了</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200714083125.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200714083205.png" alt=""></p><hr><h1 id="验证网站所有权"><a href="#验证网站所有权" class="headerlink" title="验证网站所有权"></a>验证网站所有权</h1><ul><li><a href="https://link.jianshu.com/?t=https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">Google搜索引擎提交入口</a></li><li><a href="https://link.jianshu.com/?t=http://www.baidu.com/search/url_submit.htm" target="_blank" rel="noopener">百度搜索引擎入口</a></li></ul><blockquote><p><a href="https://link.jianshu.com?t=http://zhanzhang.baidu.com/college/courseinfo?id=267&page=1#h2_article_title3" target="_blank" rel="noopener">为什么要验证网站</a>　　<br>站长平台推荐站长添加主站（您网站的链接也许会使用www 和非 www 两种网址，建议添加用户能够真实访问到的网址），添加并验证后，可证明您是该域名的拥有者，可以快捷批量添加子站点，查看所有子站数据，无需再一一验证您的子站点。<br><a href="https://link.jianshu.com?t=http://zhanzhang.baidu.com/college/courseinfo?id=267&page=1#h2_article_title13" target="_blank" rel="noopener">如何验证网站</a><br>首先如果您的网站已使用了百度统计，您可以使用统计账号登录平台，或者绑定站长平台与百度统计账号，站长平台支持您批量导入百度统计中的站点，您不需要再对网站进行验证。<br>百度站长平台为未使用百度统计的站点提供三种验证方式：<strong>文件验证、html标签验证、CNAME验证</strong>。<br>1.文件验证：您需要下载验证文件，将文件上传至您的服务器，放置于域名根目录下。<br>2.html标签验证：将html标签添加至网站首页html代码的<head>标签与<meta name="generator" content="Hexo 4.2.1"><link rel="alternate" href="/atom.xml" title="usg的blog" type="application/atom+xml"></head>标签之间。<br>3.CNAME验证：您需要登录域名提供商或托管服务提供商的网站，添加新的DNS记录。<br>验证完成后，我们将会认为您是网站的拥有者。为使您的网站一直保持验证通过的状态，请保留验证的文件、html标签或CNAME记录，我们会去定期检查验证记录。<br>参考链接：<a href="https://www.jianshu.com/p/5e68f78c7791来源：简书" target="_blank" rel="noopener">https://www.jianshu.com/p/5e68f78c7791来源：简书</a></p></blockquote><h2 id="百度："><a href="#百度：" class="headerlink" title="百度："></a>百度：</h2><p>登录百度<a href="https://ziyuan.baidu.com/linksubmit/url" target="_blank" rel="noopener">资源搜索平台</a><code>用户中心</code> &gt; <code>站点管理</code>，点击<code>添加站点</code></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713172043.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713172059.png" alt=""></p><p><code>站点领域</code>随便填一下就好，然后选择<code>文件验证</code>验证你的网站</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713172447.png" alt=""></p><p>下载红框中的<code>验证文件</code>将它拷贝到<code>hexo/themes/next/source</code>文件夹下</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713172723.png" alt=""></p><p>然后更新部署网站，在你的<code>博客域名</code>+<code>/验证文件名</code>看看你不能访问，例如我输入的是这个：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//usg-cn.web.app/baidu_verify_DppfZ4udwW.html</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713173031.png" alt=""></p><p>就证明验证文件放的位置对了，就可以在验证百度站点了（等待10分钟即可认证完成）</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713173131.png" alt=""></p><hr><h2 id="谷歌："><a href="#谷歌：" class="headerlink" title="谷歌："></a>谷歌：</h2><p>谷歌操作比较简单，就是向<a href="https://link.jianshu.com/?t=https://www.google.com/webmasters/tools" target="_blank" rel="noopener">Google站长工具</a>提交sitemap</p><p>登录Google账号，添加了站点验证通过后，选择添加网址前缀：<code>https://usg-cn.web.app/</code></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200714082054.png" alt=""></p><p>选择站点，之后在<code>索引</code>——<code>站点地图</code>中就能看到<code>添加/测试站点地图</code>，如下图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713173317.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200714082345.png" alt=""></p><p>所有都完成了</p><p>接着等上一段时间：我是弄完就去睡觉了，在搜索引擎输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:usg-cn.web.app&#x2F;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200714083449.png" alt=""></p><p>完成收录谷歌了～</p><p>百度的：一直显示抓取失败（这个问题困扰了我好久，一直没有解决）不知道是百度的问题还是我的问题，我浏览器一直可以访问到站点地图的，有知道的朋友在评论区讨论讨论！如果成功了再更新</p><p>未完待续～～～～</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200714083611.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客已经搭建成功了一段时间了，并且添加了一些博文，不过看到博客底部的访客人数还是感觉特别寒酸，为了使博客的曝光读提高，所以就考虑主动让百度或者谷歌等搜索引擎收录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/usg1024/imgshow/raw/master/img/20200713171218.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="博客" scheme="https://blog.dgut.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="https://blog.dgut.top/tags/hexo/"/>
    
      <category term="google" scheme="https://blog.dgut.top/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>博客加速</title>
    <link href="https://blog.dgut.top/2020/07/13/%E5%8D%9A%E5%AE%A2%E5%8A%A0%E9%80%9F/"/>
    <id>https://blog.dgut.top/2020/07/13/%E5%8D%9A%E5%AE%A2%E5%8A%A0%E9%80%9F/</id>
    <published>2020-07-13T05:52:02.000Z</published>
    <updated>2020-07-13T07:19:24.918Z</updated>
    
    <content type="html"><![CDATA[<p>博客加速</p><p>利用cdn进行博客加速（TODO）</p><a id="more"></a><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713135214.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713135318.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客加速&lt;/p&gt;
&lt;p&gt;利用cdn进行博客加速（TODO）&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="博客加速" scheme="https://blog.dgut.top/tags/%E5%8D%9A%E5%AE%A2%E5%8A%A0%E9%80%9F/"/>
    
  </entry>
  
  <entry>
    <title>基于opencv4.0 pyzbar和python实现二维码实时检测+定位</title>
    <link href="https://blog.dgut.top/2020/07/13/qrde/"/>
    <id>https://blog.dgut.top/2020/07/13/qrde/</id>
    <published>2020-07-13T01:53:35.000Z</published>
    <updated>2020-07-17T16:58:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h1><p>这是我入职以来第一个任务吧，要完成巡检机器人的一个视觉定位功能，目前想的是机器人通过摄像头检测到张贴在室内各个定点位置二维码，通过识别二维码内部的信息和定制二维码的大小，获取到机器人的位置。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713114358.png" alt=""></p><a id="more"></a><p>（机器人现在还是冰山一脚，目前很多功能都没有实现，还处于项目的初级阶段）</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>opencv4.0版本也是发布了，以后应该都是用opencv4.0了，现在已经内置了二维码识别模块，但是在写这段代码的时候还是用的是3.0版本，利用了pyzbar模块进行解码</p><p>环境准备：</p><ul><li>opencv4.0（3.0）</li><li>python3任意版本</li><li>pyzbar</li></ul><p>详情可以查看<a href="https://blog.csdn.net/dgut_guangdian/article/details/106860637" target="_blank" rel="noopener">我的csdn</a>里面的内容也差不多</p><h1 id="初步效果"><a href="#初步效果" class="headerlink" title="初步效果"></a>初步效果</h1><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200713100428.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/PMNCHH/cdn@master/2020/07/13/ef0bd27c920cd8184b333429fa86c461.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/PMNCHH/cdn@master/2020/07/13/dd5735262b51b1911dc4fb016865856a.png" alt=""></p><p>这里的话是3个二维码都可以扫描出来，由于qrcode的信息是中文的所以打印在屏幕上会出错请使用<code>matplotlib</code>显示图像。正确信息可以从控制台查看。</p><hr><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> pyzbar <span class="keyword">import</span> pyzbar</span><br><span class="line"><span class="comment">#二维码动态识别</span></span><br><span class="line">camera=cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">camera.set(<span class="number">3</span>,<span class="number">1280</span>) <span class="comment">#设置分辨率</span></span><br><span class="line">camera.set(<span class="number">4</span>,<span class="number">768</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    (grabbed,frame)=camera.read()</span><br><span class="line">    <span class="comment">#获取画面中心点</span></span><br><span class="line">    h1,w1= frame.shape[<span class="number">0</span>],frame.shape[<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 纠正畸变（这里把相机标定的代码去除了，各位自行标定吧）</span></span><br><span class="line">    dst = frame</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 扫描二维码</span></span><br><span class="line">    text = pyzbar.decode(dst)</span><br><span class="line">    <span class="keyword">for</span> texts <span class="keyword">in</span> text:</span><br><span class="line">        textdate = texts.data.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        print(textdate)</span><br><span class="line">        (x, y, w, h) = texts.rect<span class="comment">#获取二维码的外接矩形顶点坐标</span></span><br><span class="line">        print(<span class="string">'识别内容:'</span>+textdate)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 二维码中心坐标</span></span><br><span class="line">        cx = int(x + w / <span class="number">2</span>)</span><br><span class="line">        cy = int(y + h / <span class="number">2</span>)</span><br><span class="line">        cv2.circle(dst, (cx, cy), <span class="number">2</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">8</span>)  <span class="comment"># 做出中心坐标</span></span><br><span class="line">        print(<span class="string">'中间点坐标：'</span>,cx,cy)</span><br><span class="line">        coordinate=(cx,cy)</span><br><span class="line">        <span class="comment">#在画面左上角写出二维码中心位置</span></span><br><span class="line">        cv2.putText(dst,<span class="string">'QRcode_location'</span>+str(coordinate),(<span class="number">20</span>,<span class="number">20</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">        <span class="comment">#画出画面中心与二维码中心的连接线</span></span><br><span class="line">        cv2.line(dst, (cx,cy),(int(w1/<span class="number">2</span>),int(h1/<span class="number">2</span>)), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">        <span class="comment">#cv2.rectangle(dst, (x, y), (x + w, y + h), (0, 255, 255), 2)  # 做出外接矩形</span></span><br><span class="line">        <span class="comment">#二维码最小矩形</span></span><br><span class="line">        cv2.line(dst, texts.polygon[<span class="number">0</span>], texts.polygon[<span class="number">1</span>], (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">        cv2.line(dst, texts.polygon[<span class="number">1</span>], texts.polygon[<span class="number">2</span>], (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">        cv2.line(dst, texts.polygon[<span class="number">2</span>], texts.polygon[<span class="number">3</span>], (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">        cv2.line(dst, texts.polygon[<span class="number">3</span>], texts.polygon[<span class="number">0</span>], (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">        <span class="comment">#写出扫描内容</span></span><br><span class="line">        txt = <span class="string">'('</span> + texts.type + <span class="string">')  '</span> + textdate</span><br><span class="line">        cv2.putText(dst, txt, (x - <span class="number">10</span>, y - <span class="number">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, (<span class="number">0</span>, <span class="number">50</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    cv2.imshow(<span class="string">'dst'</span>,dst)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):  <span class="comment"># 按q保存一张图片</span></span><br><span class="line">        cv2.imwrite(<span class="string">"./frame.jpg"</span>, frame)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">camera.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>代码直接运行就行，适用于opencv3.x和4.x版本</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;项目启动&quot;&gt;&lt;a href=&quot;#项目启动&quot; class=&quot;headerlink&quot; title=&quot;项目启动&quot;&gt;&lt;/a&gt;项目启动&lt;/h1&gt;&lt;p&gt;这是我入职以来第一个任务吧，要完成巡检机器人的一个视觉定位功能，目前想的是机器人通过摄像头检测到张贴在室内各个定点位置二维码，通过识别二维码内部的信息和定制二维码的大小，获取到机器人的位置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/usg1024/imgshow/raw/master/img/20200713114358.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="opencv" scheme="https://blog.dgut.top/tags/opencv/"/>
    
      <category term="python" scheme="https://blog.dgut.top/tags/python/"/>
    
      <category term="qrcode，work" scheme="https://blog.dgut.top/tags/qrcode%EF%BC%8Cwork/"/>
    
  </entry>
  
  <entry>
    <title>感谢永远有歌，把心境道破</title>
    <link href="https://blog.dgut.top/2020/07/13/eason/"/>
    <id>https://blog.dgut.top/2020/07/13/eason/</id>
    <published>2020-07-13T01:36:49.000Z</published>
    <updated>2020-07-17T16:57:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="7-11Eason-Live-is-so-much-better-with-Music"><a href="#7-11Eason-Live-is-so-much-better-with-Music" class="headerlink" title="7.11Eason Live is so much better with Music"></a>7.11Eason Live is so much better with Music</h2><h2 id="有-了-音-乐-生-活-更-美-好-，Eason"><a href="#有-了-音-乐-生-活-更-美-好-，Eason" class="headerlink" title="有 了 音 乐 生 活 更 美 好 ，Eason."></a>有 了 音 乐 生 活 更 美 好 ，Eason.</h2><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/Eason.jpg" alt="img"></p><a id="more"></a><p>youtube地址：</p><iframe width="560" height="315" src="https://www.youtube.com/embed/9KBBYv5neMk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>> 今天最幸福的是就是跟早上起来陪陈奕迅看日出，下午陪陈奕迅看日落！<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src= "/img/loading.gif" data-src="https://pics7.baidu.com/feed/6159252dd42a2834ad1f72340f993cec15cebf03.jpeg?token=f80acdd8826a5aff8f7f729a63b40631" alt="img"></p><p>致敬这场疫情中默默奉献的那些人</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;7-11Eason-Live-is-so-much-better-with-Music&quot;&gt;&lt;a href=&quot;#7-11Eason-Live-is-so-much-better-with-Music&quot; class=&quot;headerlink&quot; title=&quot;7.11Eason Live is so much better with Music&quot;&gt;&lt;/a&gt;7.11Eason Live is so much better with Music&lt;/h2&gt;&lt;h2 id=&quot;有-了-音-乐-生-活-更-美-好-，Eason&quot;&gt;&lt;a href=&quot;#有-了-音-乐-生-活-更-美-好-，Eason&quot; class=&quot;headerlink&quot; title=&quot;有 了 音 乐 生 活 更 美 好 ，Eason.&quot;&gt;&lt;/a&gt;有 了 音 乐 生 活 更 美 好 ，Eason.&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/Eason.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="日常" scheme="https://blog.dgut.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo优雅地使用图床</title>
    <link href="https://blog.dgut.top/2020/07/10/hexo-pic/"/>
    <id>https://blog.dgut.top/2020/07/10/hexo-pic/</id>
    <published>2020-07-10T01:35:48.000Z</published>
    <updated>2020-07-17T16:58:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实很早就接触了Markdown语法了，那是可以追溯到学生时代。在学校实验室的时候需要对一些新来的师弟师妹进行培训，就需要写一些教程文档，那时候就开始利用Markdown+Typora进行教程编写，但是苦于Markdown语法的特殊性使得图片的插入尤为困难，移动文档的时候往往图片会挂掉，这对于我来说就是十分不方便的，所以最后就不了了之，用回office作罢……</p><p>等到了工作的时候，来到东阳光刚刚入职那会师姐就发来一个用Markdown写的教程文档，我眼前一亮，居然文档可以那么优美简洁，加上学生时代早有接触我打起了重拾Markdown的信心，随后便疯狂地爱上了这种<strong>“轻量级标记语言”</strong>。</p><a id="more"></a><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710101818.png" alt=""></p><p>那么怎么解决图片的问题呢？经过简单的查找之后我找到了<code>PicGo</code>+<code>Github(cdn)</code>的强强组合，这样的组合即简单易用又稳定可靠访问速度还比较快，不用担心图片会被删掉。</p><h1 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h1><p>PicGo的主页：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a></p><p><strong>PicGo：一个有用的快速上传图片并获取图片URL链接的工具</strong></p><p>PicGo本体支持如下图床：</p><ul><li><code>七牛图床</code> v1.0</li><li><code>腾讯云 COS v4\v5 版本</code> v1.1和v1.5.0</li><li><code>又拍云</code> v1.2.0</li><li><code>GitHub</code> v1.5.0</li><li><code>SM.MS V2</code> v2.3.0-beta.0</li><li><code>阿里云 OSS</code> v1.6.0</li><li><code>Imgur</code> v1.6.0</li></ul><p>PicGo的界面：</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/Molunerfinn/test/master/picgo/picgo-2.0.gif" alt="img"></p><p><img src= "/img/loading.gif" data-src="https://user-images.githubusercontent.com/12621342/34242310-b5056510-e655-11e7-8568-60ffd4f71910.gif" alt="picgo-menubar"></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710102357.png" alt="picgo的界面截图"></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710102504.png" alt=""></p><p>利用这样的小插件的话可以让我们的Markdown文档轻易的插入图片，在线图片特别方便用于分享出去，芜湖，起飞了！</p><p>安装教程：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a></p><hr><h1 id="GitHub图床"><a href="#GitHub图床" class="headerlink" title="GitHub图床"></a>GitHub图床</h1><p>GitHub想必大家都知道吧！<code>在线程序员交友平台</code>我们就是利用这个平台作为一个稳定可靠的图片保存位置。</p><h2 id="1-登录GitHub创建Repository"><a href="#1-登录GitHub创建Repository" class="headerlink" title="1.登录GitHub创建Repository"></a>1.登录GitHub创建Repository</h2><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710103103.png" alt=""></p><h2 id="2-设置Repository"><a href="#2-设置Repository" class="headerlink" title="2.设置Repository"></a>2.设置Repository</h2><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710103303.png" alt=""></p><ul><li>设置仓库名</li><li>设置为Pubic（重要）如果设置为私人的话就看不到了</li><li>创建仓库</li></ul><h2 id="3-生成一个Token"><a href="#3-生成一个Token" class="headerlink" title="3.生成一个Token"></a>3.生成一个Token</h2><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710103617.png" alt=""></p><p>点开头像的<code>设定值</code></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710103815.png" alt=""></p><p>点开左侧最下面的<code>开发人员设定</code></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710103921.png" alt=""></p><p>点击个人访问令牌</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710104043.png" alt=""></p><p>创建新的<code>Token</code></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710104124.png" alt=""></p><p>填写描述，选择<code>repo</code>,然后点击<code>Generate token</code>按钮</p><blockquote><p>注意：这串token十分重要，记录下来只会显示一次，要好好保存，不能落入其他人手中喔！</p></blockquote><hr><h1 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h1><p><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">下载相应的版本</a></p><p>安装：不会装的看<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">文档</a></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710104609.png" alt=""></p><blockquote><p>设定仓库名的时候，是按照“账户名/仓库名的格式填写”</p><p>分支名统一填写“master”</p><p>将之前的Token黏贴在这里</p><p>存储的路径可以按照我这样子写，就会在repository下创建一个“img”文件夹</p><p>自定义域名的作用是，在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接，放到剪切板上<code>https://raw.githubusercontent.com/用户名/RepositoryName/分支名，</code>，自定义域名需要按照这样去填写</p><p>或者使用cdn加速：</p><p><code>https://cdn.jsdelivr.net/gh/用户名/RepositoryName</code>来进行加速</p></blockquote><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710104922.png" alt=""></p><p>这样之后就可以愉快地在文档中加入图片了，同时你的图片也可以在github仓库中查看到</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710142404.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710142534.png" alt=""></p><hr><h1 id="码云Gitee图床"><a href="#码云Gitee图床" class="headerlink" title="码云Gitee图床"></a>码云Gitee图床</h1><p>教程：<a href="https://cychan811.gitee.io/cychan811/2020/07/04/PicGo-gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/" target="_blank" rel="noopener">地址</a></p><p>码云官网：<a href="https://gitee.com/" target="_blank" rel="noopener">地址</a></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713212031.png" alt=""></p><p>速度比GitHub更快而且还不会时不时出现无法提交的小bug，但是怎么说呢？码云gitee毕竟是国内的平台，论体量来说比GitHub小很多，也不排除什么时候突然就停止服务或者关闭api了，所以说这个还是用用就行了。<strong>不过速度是真的快，毕竟是本土化的服务器</strong></p><h1 id="一些错误处理"><a href="#一些错误处理" class="headerlink" title="一些错误处理"></a>一些错误处理</h1><ul><li>上传失败：首先检查上传或者剪贴板的东东是否是支持格式的图片，如果确认无误的话可能是PicGo的问题进入<code>PicGo设置</code> <code>设置Server</code>关闭再打开，如果还是不行重启软件可以解决大部分问题。</li><li>最好打开<code>上传前重命名</code>功能，因为有时候可能因为某些图片是中文的，导致错误，打开后可以把图片设置为数字时间格式，这样方便很多。</li><li>剩下的遇到再补充</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实很早就接触了Markdown语法了，那是可以追溯到学生时代。在学校实验室的时候需要对一些新来的师弟师妹进行培训，就需要写一些教程文档，那时候就开始利用Markdown+Typora进行教程编写，但是苦于Markdown语法的特殊性使得图片的插入尤为困难，移动文档的时候往往图片会挂掉，这对于我来说就是十分不方便的，所以最后就不了了之，用回office作罢……&lt;/p&gt;
&lt;p&gt;等到了工作的时候，来到东阳光刚刚入职那会师姐就发来一个用Markdown写的教程文档，我眼前一亮，居然文档可以那么优美简洁，加上学生时代早有接触我打起了重拾Markdown的信心，随后便疯狂地爱上了这种&lt;strong&gt;“轻量级标记语言”&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="https://blog.dgut.top/tags/hexo/"/>
    
      <category term="next" scheme="https://blog.dgut.top/tags/next/"/>
    
      <category term="图床" scheme="https://blog.dgut.top/tags/%E5%9B%BE%E5%BA%8A/"/>
    
      <category term="markdonw" scheme="https://blog.dgut.top/tags/markdonw/"/>
    
  </entry>
  
  <entry>
    <title>阿里云Ubuntu18.04搭建seafile服务器</title>
    <link href="https://blog.dgut.top/2020/07/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BAseafile%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://blog.dgut.top/2020/07/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BAseafile%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-07-09T00:57:07.000Z</published>
    <updated>2020-07-19T05:35:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://www.seafile.com/media/img/seafile-logo.png" alt="seafile logo"></p><a id="more"></a><p>11111</p><h2 id="利用脚本一键安装seaflie及其依赖环境"><a href="#利用脚本一键安装seaflie及其依赖环境" class="headerlink" title="利用脚本一键安装seaflie及其依赖环境"></a>利用脚本一键安装seaflie及其依赖环境</h2><blockquote><p>这里的安装脚本可以帮助您快速的安装好Seafile服务器，并配置好MariaDB，Memcached，WebDAV，Ngnix和启动自动启动脚本。</p></blockquote><p>文档地址：<a href="https://github.com/haiwen/seafile-server-installer-cn" target="_blank" rel="noopener">https://github.com/haiwen/seafile-server-installer-cn</a></p><p>安装干净的Ubuntu 16.04 / 18.04或CentOS 7/8系统，并<strong>做好准备</strong>（如果安装失败需要还原到替换）。</p><p>切换成root账号（sudo -i）</p><h3 id="获取安装脚本"><a href="#获取安装脚本" class="headerlink" title="获取安装脚本"></a>获取安装脚本</h3><ul><li><p>适用于Seafile 7.1.x及更高版本</p><p>Ubuntu 18.04（64位）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/haiwen/seafile-server-installer-cn/master/seafile-server-7.1-ubuntu-amd64-http</span><br></pre></td></tr></table></figure><h3 id="运行安装脚本"><a href="#运行安装脚本" class="headerlink" title="运行安装脚本"></a>运行安装脚本</h3><p>Ubuntu 16.04 / 18.04（64bit）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash seafile-server-ubuntu-amd64-http 7.1.4</span><br></pre></td></tr></table></figure><blockquote><p>脚本启动您选择要安装的版本，按照提示进行选择即可：</p><ul><li>如果要安装专业版，需要先将下载好的专业版的包<code>seafile-pro-server_6.0.13_x86-64.tar.gz</code>放到<code>/opt/</code>目录下</li><li>如果是安装开源版，安装脚本在执行过程中会检查<code>/opt</code>目录下是否有指定版本号的安装包，如果存在替换安装此包，否则会从Seafile网站下载。所以，为了避免因下载失败而导致安装中断，您可以提前下载好安装包放到<code>/opt/</code>目录下。</li></ul><p>该脚本运行完后会在命令行中打印配置信息和管理员账号密码，请仔细阅读。（您也可以查看安装日志<code>/opt/seafile/aio_seafile-server.log</code>），MySQL的root用户密码存储在<code>/root/.my.cnf</code>中； MySQL的seafile用户密码存储在<code>/opt/seafile.my.cnf</code>中。</p></blockquote></li></ul><h3 id="启动或者关闭服务"><a href="#启动或者关闭服务" class="headerlink" title="启动或者关闭服务"></a>启动或者关闭服务</h3><p>Ubuntu 16.04 / 18.04：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service seafile-server stop</span><br><span class="line">service seafile-server start</span><br></pre></td></tr></table></figure><h3 id="重置管理员账户和密码"><a href="#重置管理员账户和密码" class="headerlink" title="重置管理员账户和密码"></a>重置管理员账户和密码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/seafile/seafile-server-latest</span><br><span class="line">./reset-admin.sh</span><br></pre></td></tr></table></figure><h3 id="开放阿里云安全组端口"><a href="#开放阿里云安全组端口" class="headerlink" title="开放阿里云安全组端口"></a>开放阿里云安全组端口</h3><p>浏览器登录<a href="https://homenew.console.aliyun.com/" target="_blank" rel="noopener">阿里云控制台</a>-&gt;选择你的云服务器ECS-&gt;找到你的实例-&gt;选择本实例安全组-&gt;入方向</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710141757.png" alt=""></p><p>手动添加允许策略目的端口：’8000/8083’ 源：’0.0.0.0/0’备注seafile</p><p>手动添加允许策略目的端口：’80’ 源：’0.0.0.0/0’备注seafile_hub</p><p>保存即可</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710141939.png" alt=""> </p><h3 id="登录web管理端"><a href="#登录web管理端" class="headerlink" title="登录web管理端"></a>登录web管理端</h3><p>浏览器访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;你的云服务器ip:80</span><br></pre></td></tr></table></figure><p>登录即可</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710141543.png" alt=""> </p><h3 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h3><p>访问seafile客户端下载网址：<a href="https://www.seafile.com/download/" target="_blank" rel="noopener">https://www.seafile.com/download/</a></p><p>下载相应客户端即可</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710141329.png" alt=""></p><hr><h1 id="操作指令"><a href="#操作指令" class="headerlink" title="操作指令"></a>操作指令</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/seafile/seafile-server-latest</span><br><span class="line">./seafile.sh start</span><br><span class="line">./seahub.sh start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.seafile.com/media/img/seafile-logo.png&quot; alt=&quot;seafile logo&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="seafile" scheme="https://blog.dgut.top/tags/seafile/"/>
    
      <category term="文件同步服务器" scheme="https://blog.dgut.top/tags/%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="阿里云" scheme="https://blog.dgut.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>记录一下Markdown用法</title>
    <link href="https://blog.dgut.top/2020/07/07/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8BMarkdown%E7%94%A8%E6%B3%95/"/>
    <id>https://blog.dgut.top/2020/07/07/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8BMarkdown%E7%94%A8%E6%B3%95/</id>
    <published>2020-07-07T00:47:48.000Z</published>
    <updated>2020-07-18T06:06:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于Markdown的用法"><a href="#关于Markdown的用法" class="headerlink" title="关于Markdown的用法"></a>关于Markdown的用法</h1><p><img src= "/img/loading.gif" data-src="https://www.runoob.com/wp-content/uploads/2019/03/md1.gif" alt="img"></p><a id="more"></a><h2 id="Markdown语言"><a href="#Markdown语言" class="headerlink" title="Markdown语言"></a>Markdown语言</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong></p></blockquote><hr><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p>​        使用<a href="https://typora.io/" target="_blank" rel="noopener">Typora编辑器</a>来书写Markdown语句，Typora 支持 MacOS 、Windows、Linux 平台，且包含多种主题，编辑后直接渲染出效果。支持导出HTML、PDF、Word、图片等多种类型文件。<strong>是一款很优秀的跨平台编辑器。</strong></p><p><img src= "/img/loading.gif" data-src="https://typora.io/img/new/image.png" alt="演示插入图片"></p><p><img src= "/img/loading.gif" data-src="https://typora.io/img/new/fences.png" alt="img"></p><blockquote><p>Typora给您既是读者又是作家的无缝体验。它删除了预览窗口，模式切换器，降价源代码的语法符号以及所有其他不必要的干扰。相反，它提供了真正的实时预览功能，可帮助您专注于内容本身。</p></blockquote><p>Typora 官网：<a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a></p><hr><h1 id="演示实例"><a href="#演示实例" class="headerlink" title="演示实例"></a>演示实例</h1><p><strong>本文作者：[李芬芳</strong>](<a href="https://virony-cn.web.app/" target="_blank" rel="noopener">https://virony-cn.web.app/</a>)</p><h1 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h1><h2 id="1-1-内容目录-toc"><a href="#1-1-内容目录-toc" class="headerlink" title="1.1 内容目录[toc]"></a>1.1 内容目录[toc]</h2><ul><li><p>语法</p><p>[TOC]</p></li></ul><h2 id="1-2-标题"><a href="#1-2-标题" class="headerlink" title="1.2 标题"></a>1.2 标题</h2><ul><li>语法</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#         一级标题  </span><br><span class="line">##        二级标题</span><br><span class="line">###       三级标题</span><br><span class="line">####      四级标题</span><br><span class="line">#####     五级标题</span><br><span class="line">######    六级标题</span><br></pre></td></tr></table></figure><h2 id="1-3-引用"><a href="#1-3-引用" class="headerlink" title="1.3 引用"></a>1.3 引用</h2><ul><li>语法</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用内容<span class="number">1</span></span><br><span class="line">&gt; 引用内容<span class="number">2</span></span><br><span class="line">&gt;&gt; 引用内容<span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>引用内容1</p></blockquote><blockquote><p>引用内容2</p></blockquote><blockquote><blockquote><p>引用内容3</p></blockquote></blockquote><h1 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h1><h2 id="2-1-单行代码"><a href="#2-1-单行代码" class="headerlink" title="2.1 单行代码"></a>2.1 单行代码</h2><ul><li>语法</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">String </span><span class="keyword">str1 </span>= <span class="string">"hello"</span><span class="comment">;`</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><code>String str1 = &quot;hello&quot;;</code> </p><h2 id="2-2-多行代码"><a href="#2-2-多行代码" class="headerlink" title="2.2 多行代码"></a>2.2 多行代码</h2><ul><li>语法</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker psint a</span> = 1;</span><br><span class="line"><span class="attribute">int b</span> = a;</span><br></pre></td></tr></table></figure><h1 id="3-列表"><a href="#3-列表" class="headerlink" title="3. 列表"></a>3. 列表</h1><h2 id="3-1-无序列表"><a href="#3-1-无序列表" class="headerlink" title="3.1 无序列表"></a>3.1 无序列表</h2><ul><li>语法</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 无序列表<span class="number">1</span></span><br><span class="line">+ 无序列表<span class="number">2</span></span><br><span class="line">- 无序列表<span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li><p>效果</p></li><li><p>无序列表1</p></li><li><p>无序列表2</p></li><li><p>无序列表3</p></li></ul><h2 id="3-2-多行无序列表"><a href="#3-2-多行无序列表" class="headerlink" title="3.2 多行无序列表"></a>3.2 多行无序列表</h2><ul><li>语法</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">* 多行无序列表1</span></span><br><span class="line"><span class="keyword">TAB</span> * 多行无序列表2</span><br><span class="line"><span class="keyword">TAB</span> <span class="keyword">TAB</span> * 多行无序列表3</span><br></pre></td></tr></table></figure><ul><li>效果</li><li>多行无序列表1<ul><li>多行无序列表2<ul><li>多行无序列表3</li></ul></li></ul></li></ul><h2 id="3-3-有序列表"><a href="#3-3-有序列表" class="headerlink" title="3.3 有序列表"></a>3.3 有序列表</h2><ul><li>语法</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 有序列表<span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 有序列表<span class="number">2</span></span><br><span class="line"><span class="number">3.</span> 有序列表<span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3</li></ol><h2 id="3-4-多行有序列表"><a href="#3-4-多行有序列表" class="headerlink" title="3.4 多行有序列表"></a>3.4 多行有序列表</h2><ul><li>语法</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 多行有序列表<span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 多行有序列表<span class="number">2</span></span><br><span class="line"><span class="number">1.</span> 多行有序列表<span class="number">2</span><span class="number">-1</span></span><br><span class="line"><span class="number">2.</span> 多行有序列表<span class="number">2</span><span class="number">-2</span></span><br><span class="line"><span class="number">3.</span> 多行有序列表<span class="number">3</span></span><br><span class="line"><span class="number">1.</span> 多行有序列表<span class="number">3</span><span class="number">-1</span></span><br><span class="line"><span class="number">2.</span> 多行有序列表<span class="number">3</span><span class="number">-2</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><ol><li>多行有序列表1</li><li>多行有序列表2<ol><li>多行有序列表2-1</li><li>多行有序列表2-2</li></ol></li><li>多行有序列表3<ol><li>多行有序列表3-1</li><li>多行有序列表3-2</li></ol></li></ol><h2 id="3-5-任务列表"><a href="#3-5-任务列表" class="headerlink" title="3.5 任务列表"></a>3.5 任务列表</h2><ul><li>语法</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span><span class="selector-attr">[ ]</span> 抽烟</span><br><span class="line"><span class="selector-tag">-</span><span class="selector-attr">[x]</span> 喝酒</span><br><span class="line"><span class="selector-tag">-</span><span class="selector-attr">[ ]</span> 烫头</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p>-[ ] 抽烟</p><p>-[x] 喝酒</p><p>-[ ] 烫头</p><h2 id="3-6-表格"><a href="#3-6-表格" class="headerlink" title="3.6 表格"></a>3.6 表格</h2><ul><li>语法</li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">姓名</span>|<span class="string">性别</span>|<span class="string">年龄</span>|<span class="string">手机号</span>|</span><br><span class="line">|<span class="string">张三</span>|<span class="string">男</span>|<span class="string">21</span>|<span class="string">18975346876</span>|</span><br><span class="line">|<span class="string">李四</span>|<span class="string">女</span>|<span class="string">23</span>|<span class="string">17789548964</span>|</span><br><span class="line">|<span class="string">王五</span>|<span class="string">男</span>|<span class="string">25</span>|<span class="string">15876513546</span>|</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><table><thead><tr><th align="center">姓名</th><th align="center">性别</th><th align="center">年龄</th><th align="center">手机号</th></tr></thead><tbody><tr><td align="center">张三</td><td align="center">男</td><td align="center">21</td><td align="center"></td></tr><tr><td align="center">李四</td><td align="center">女</td><td align="center">23</td><td align="center"></td></tr><tr><td align="center">王五</td><td align="center">男</td><td align="center">25</td><td align="center"></td></tr></tbody></table><h1 id="4-链接"><a href="#4-链接" class="headerlink" title="4. 链接"></a>4. 链接</h1><h2 id="4-1-图片"><a href="#4-1-图片" class="headerlink" title="4.1 图片"></a>4.1 图片</h2><ul><li>语法1（本地图片）</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片描述</span>](<span class="link">image</span>)</span><br></pre></td></tr></table></figure><ul><li>语法2（网络图片）</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片描述</span>](<span class="link">图片url</span>)</span><br></pre></td></tr></table></figure><ul><li>效果2</li></ul><p><img src= "/img/loading.gif" data-src="math.png" alt="figure1"></p><p><img src= "/img/loading.gif" data-src="https://typora.io/img/new/diagram.png" alt="img"></p><h2 id="4-2-超链接"><a href="#4-2-超链接" class="headerlink" title="4.2 超链接"></a>4.2 超链接</h2><ul><li>语法1（行内式链接）</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">百度</span>][<span class="symbol">https://www.baidu.com/</span>]</span><br></pre></td></tr></table></figure><ul><li>效果1</li></ul><p>[百度][<a href="https://www.baidu.com/]" target="_blank" rel="noopener">https://www.baidu.com/]</a></p><ul><li>语法2 （自动链接）</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="string">https:</span><span class="comment">//github.com/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果2</li></ul><p><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><h1 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h1><h2 id="5-1-斜体"><a href="#5-1-斜体" class="headerlink" title="5.1 斜体"></a>5.1 斜体</h2><ul><li>语法</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line"><span class="literal">_</span>斜体<span class="literal">_</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><em>斜体</em><br><em>斜体</em></p><h2 id="5-2-加粗"><a href="#5-2-加粗" class="headerlink" title="5.2 加粗"></a>5.2 加粗</h2><ul><li>语法</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**加粗**</span></span><br><span class="line"><span class="strong">__加粗__</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><strong>加粗</strong><br><strong>加粗</strong></p><h2 id="5-3-下划线"><a href="#5-3-下划线" class="headerlink" title="5.3 下划线"></a>5.3 下划线</h2><ul><li>语法</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><u>下划线</u></p><h2 id="5-4-删除线"><a href="#5-4-删除线" class="headerlink" title="5.4 删除线"></a>5.4 删除线</h2><ul><li>语法</li></ul><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><del>删除线</del></p><h2 id="5-5-分隔线"><a href="#5-5-分隔线" class="headerlink" title="5.5 分隔线"></a>5.5 分隔线</h2><ul><li>语法</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**<span class="strong">*</span></span><br><span class="line"><span class="strong">---</span></span><br><span class="line"><span class="strong">___</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><hr><hr><hr><h2 id="5-6-注脚"><a href="#5-6-注脚" class="headerlink" title="5.6 注脚"></a>5.6 注脚</h2><ul><li>语法</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Typora[^<span class="number">1</span>]</span><br><span class="line">[^<span class="number">1</span>]A markdown editor</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p>Typora[^1]</p><h2 id="5-7-上下标"><a href="#5-7-上下标" class="headerlink" title="5.7 上下标"></a>5.7 上下标</h2><ul><li>语法</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">3</span>^<span class="number">2</span>=<span class="number">9</span>$</span><br><span class="line">$<span class="number">3</span>^&#123;(<span class="number">3</span><span class="number">-1</span>)&#125;=<span class="number">9</span>$</span><br><span class="line">$H_2SO_4$</span><br><span class="line">$H_&#123;<span class="number">2</span>SO_4&#125;$</span><br></pre></td></tr></table></figure><ul><li>效果 </li></ul><p>$$<br>3^2 = 9<br>$$</p><p>$$<br>3^{(3-1)}=9<br>$$</p><p>$$<br>H_2SO_4<br>$$</p><h2 id="5-8-符号的输入"><a href="#5-8-符号的输入" class="headerlink" title="5.8 符号的输入"></a>5.8 符号的输入</h2><ul><li>语法</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">\\</span>   反斜线</span><br><span class="line"><span class="string">\`</span>   反引号</span><br><span class="line"><span class="string">\*</span>   星号</span><br><span class="line"><span class="string">\_</span>   底线</span><br><span class="line"><span class="string">\&#123;</span> <span class="string">\&#125;</span>  花括号</span><br><span class="line"><span class="string">\[</span> <span class="string">\]</span>  方括号</span><br><span class="line"><span class="string">\(</span> <span class="string">\)</span>  括弧</span><br><span class="line"><span class="string">\#</span>   井字号</span><br><span class="line"><span class="string">\+</span>   加号</span><br><span class="line"><span class="string">\-</span>   减号</span><br><span class="line"><span class="string">\.</span>   英文句点</span><br><span class="line"><span class="string">\!</span>   惊叹号</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p>\ ` * _ { } [ ] () # + - . ! </p><h2 id="5-9-特殊字符"><a href="#5-9-特殊字符" class="headerlink" title="5.9 特殊字符"></a>5.9 特殊字符</h2><ul><li>语法</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&amp;copy;      版权      </span></span><br><span class="line"><span class="meta">&amp;reg;       注册商标</span></span><br><span class="line"><span class="meta">&amp;trade;     商标</span></span><br><span class="line"><span class="meta">&amp;nbsp;      空格</span></span><br><span class="line"><span class="meta">&amp;amp;       和号</span></span><br><span class="line"><span class="meta">&amp;quot;      引号</span></span><br><span class="line"><span class="meta">&amp;apos;      撇号</span></span><br><span class="line"><span class="meta">&amp;lt;        小于号</span></span><br><span class="line"><span class="meta">&amp;gt;        大于号</span></span><br><span class="line"><span class="meta">&amp;ne;        不等号</span></span><br><span class="line"><span class="meta">&amp;le;        小于等于</span></span><br><span class="line"><span class="meta">&amp;ge;        大于等于</span></span><br><span class="line"><span class="meta">&amp;cent;      分</span></span><br><span class="line"><span class="meta">&amp;pound;     磅</span></span><br><span class="line"><span class="meta">&amp;euro;      欧元</span></span><br><span class="line"><span class="meta">&amp;yen;       元</span></span><br><span class="line"><span class="meta">&amp;sect;      节</span></span><br><span class="line"><span class="meta">&amp;times;     乘号</span></span><br><span class="line"><span class="meta">&amp;divide;    除号</span></span><br><span class="line"><span class="meta">&amp;plusmn;    正负号</span></span><br></pre></td></tr></table></figure><p>&copy;      版权<br>&reg;       注册商标<br>&trade;     商标<br>&nbsp;      空格<br>&amp;       和号<br>&quot;      引号<br>&apos;      撇号<br>&lt;        小于号<br>&gt;        大于号<br>&ne;        不等号<br>&le;        小于等于<br>&ge;        大于等于<br>&cent;      分<br>&pound;     磅<br>&euro;      欧元<br>&yen;       元<br>&sect;      节<br>&times;     乘号<br>&divide;    除号<br>&plusmn;    正负号</p><h2 id="5-10-高亮文本"><a href="#5-10-高亮文本" class="headerlink" title="5.10 高亮文本"></a>5.10 高亮文本</h2><p>== 文本 ==<br>$$<br>lim_{x \to \infty} \ exp(-x)=0<br>$$<br>&lt;center&gt;这是要居中的文本内容&lt;/center&gt;</p><p>本文作者：<a href="https://virony-cn.web.app/" target="_blank" rel="noopener">李芬芳</a></p><h1 id="6-拓展"><a href="#6-拓展" class="headerlink" title="6.拓展"></a>6.拓展</h1><p>利用html实现展开查看：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;展开查看&lt;/summary&gt;</span><br><span class="line">&lt;pre&gt;&lt;code&gt;</span><br><span class="line">这里填入内容</span><br><span class="line">&lt;/code&gt;&lt;/pre&gt;</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure><details><summary>展开查看</summary><pre><code>展开查看的内容</code></pre></details><h1 id="7-针对hexo的markdown"><a href="#7-针对hexo的markdown" class="headerlink" title="7.针对hexo的markdown"></a>7.针对hexo的markdown</h1><p>、<a href="https://demo.jerryc.me/posts/4aa8abbe/#tag-hide" target="_blank" rel="noopener">https://demo.jerryc.me/posts/4aa8abbe/#tag-hide</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于Markdown的用法&quot;&gt;&lt;a href=&quot;#关于Markdown的用法&quot; class=&quot;headerlink&quot; title=&quot;关于Markdown的用法&quot;&gt;&lt;/a&gt;关于Markdown的用法&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.runoob.com/wp-content/uploads/2019/03/md1.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="markdown" scheme="https://blog.dgut.top/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>在hexo博客上添加本地图片</title>
    <link href="https://blog.dgut.top/2020/07/06/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/"/>
    <id>https://blog.dgut.top/2020/07/06/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</id>
    <published>2020-07-06T08:00:52.000Z</published>
    <updated>2020-07-17T16:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>测试一下图片</p><p>本站使用了GitHub+gitee作为图库</p><a id="more"></a><p><img src= "/img/loading.gif" data-src="notebook-2666360_1920.jpg" alt="notebook-2666360_1920"></p><p>测试成功</p><p><img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/ZengWenJian123/picBed/master/img/google.JPG" alt="1"></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/10/UulKnx.jpg" alt="UulKnx.jpg"></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/10/UulKnx.jpg" alt="UulKnx.jpg">)<img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/10/UulRuq.png" alt="UulRuq.png"></p><p>![](<a href="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/2020-07-02" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/2020-07-02</a> 16-27-23 的屏幕截图.png)</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710092008.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710092036.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710092046.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710134727.webp" alt=""></p><p>码云图床：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713110117.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713112422.png" alt=""><br><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713112423.png" alt=""><br><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713112424.png" alt=""><br><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713112425.png" alt=""><br><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713112426.png" alt=""><br><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713112427.png" alt=""><br><img src= "/img/loading.gif" data-src="https://gitee.com/usg1024/imgshow/raw/master/img/20200713112428.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试一下图片&lt;/p&gt;
&lt;p&gt;本站使用了GitHub+gitee作为图库&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>记录学习Ubuntu的指令</title>
    <link href="https://blog.dgut.top/2020/07/03/%E8%AE%B0%E5%BD%95%E5%AD%A6%E4%B9%A0Ubuntu%E7%9A%84%E6%8C%87%E4%BB%A4/"/>
    <id>https://blog.dgut.top/2020/07/03/%E8%AE%B0%E5%BD%95%E5%AD%A6%E4%B9%A0Ubuntu%E7%9A%84%E6%8C%87%E4%BB%A4/</id>
    <published>2020-07-03T02:16:35.000Z</published>
    <updated>2020-07-28T00:36:09.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux指令"><a href="#Linux指令" class="headerlink" title="Linux指令"></a>Linux指令</h1><p><img src= "/img/loading.gif" data-src="https://cdn.pixabay.com/photo/2018/04/23/14/43/ubuntu-3344434_960_720.png" alt="Ubuntu, Desktop, Operating System, Computer, Office"></p><a id="more"></a><h2 id="1-目录与路径"><a href="#1-目录与路径" class="headerlink" title="1.目录与路径"></a>1.目录与路径</h2><table><thead><tr><th>.</th><th>本层目录</th></tr></thead><tbody><tr><td>..</td><td>上一层目录</td></tr><tr><td>-</td><td>前一个目录（历史）</td></tr><tr><td>~</td><td>当前用户身份目录</td></tr><tr><td>~account</td><td>account这个用户的home目录</td></tr></tbody></table><table><thead><tr><th>cd</th><th>变换目录</th></tr></thead><tbody><tr><td>pwd</td><td>显示当前目录路径</td></tr><tr><td>mkdir</td><td>建立新的目录</td></tr><tr><td>rmdir</td><td>删除一个空的目录</td></tr></tbody></table><h2 id="2-文件与目录管理"><a href="#2-文件与目录管理" class="headerlink" title="2.文件与目录管理"></a>2.文件与目录管理</h2><h3 id="1-ls-文件目录检查"><a href="#1-ls-文件目录检查" class="headerlink" title="(1) ls 文件目录检查"></a>(1) ls 文件目录检查</h3><blockquote><p>选项与参数:<br>-a :全部的文件,连同隐藏档( 开头为 . 的文件) 一起列出来(常用)<br>-A :全部的文件,连同隐藏档,但不包括 . 与 .. 这两个目录<br>-d :仅列出目录本身,而不是列出目录内的文件数据(常用)<br>-f :直接列出结果,而不进行排序 (ls 预设会以档名排序!)<br>-F :根据文件、目录等信息,给予附加数据结构,例如:<br>*:代表可执行文件; /:代表目录; =:代表 socket 文件; |:代表 FIFO 文件;<br>-h :将文件容量以人类较易读的方式(例如 GB, KB 等等)列出来;<br>-i :列出 inode 号码,inode 的意义下一章将会介绍;<br>-l :长数据串行出,包含文件的属性与权限等等数据;(常用)<br>-n :列出 UID 与 GID 而非使用者与群组的名称 (UID 与 GID 会在账号管理提到!)<br>-r :将排序结果反向输出,例如:原本档名由小到大,反向则为由大到小;<br>-R :连同子目录内容一起列出来,等于该目录下的所有文件都会显示出来;<br>-S :以文件容量大小排序,而不是用档名排序;<br>-t :依时间排序,而不是用档名。<br>–color=never<br>:不要依据文件特性给予颜色显示;<br>–color=always :显示颜色<br>–color=auto :让系统自行依据设定来判断是否给予颜色<br>–full-time :以完整时间模式 (包含年、月、日、时、分) 输出<br>–time={atime,ctime} :输出 access 时间或改变权限属性时间 (ctime)<br>而非内容变更时间 (modification time)</p></blockquote><p>范例：</p><blockquote><p>将家目录下的所有文件列出来(含属性与隐藏文件)</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al～</span><br></pre></td></tr></table></figure><blockquote><p>完整的呈现文件的修改时间 (modification time)</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al --full-time ~</span><br></pre></td></tr></table></figure><h3 id="2-复制、删除与移动"><a href="#2-复制、删除与移动" class="headerlink" title="(2)复制、删除与移动"></a>(2)复制、删除与移动</h3><table><thead><tr><th>cp</th><th>复制文件或者目录</th></tr></thead><tbody><tr><td>rm</td><td>删除</td></tr><tr><td>mv</td><td>移动</td></tr></tbody></table><h4 id="cp（复制文件或者目录）"><a href="#cp（复制文件或者目录）" class="headerlink" title="cp（复制文件或者目录）"></a>cp（复制文件或者目录）</h4><p>cp [-adfilprsu] 来源文件(source) 目标文件(destination)</p><blockquote><p>选项与参数:<br>-a :相当于 -dr –preserve=all 的意思,至于 dr 请参考下列说明;(常用)<br>-d :若来源文件为链接文件的属性(link file),则复制链接文件属性而非文件本身;<br>-f :为强制(force)的意思,若目标文件已经存在且无法开启,则移除后再尝试一次;<br>-i :若目标文件(destination)已经存在时,在覆盖时会先询问动作的进行(常用)<br>-l :进行硬式连结(hard link)的连结档建立,而非复制文件本身;<br>-p :连同文件的属性(权限、用户、时间)一起复制过去,而非使用默认属性(备份常用);<br>-r :递归持续复制,用于目录的复制行为;(常用)<br>-s :复制成为符号链接文件 (symbolic link),亦即『快捷方式』文件;<br>-u :destination 比 source 旧才更新 destination,或 destination 不存在的情况下才复制。<br>–preserve=all :除了 -p 的权限相关参数外,还加入 SELinux 的属性, links, xattr 等也复制了。<br>最后需要注意的,如果来源档有两个以上,则最后一个目的文件一定要是『目录』才行!</p></blockquote><p>范例：</p><blockquote><p>把new/1.txt复制到当前目录.</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp new/1.txt .</span><br></pre></td></tr></table></figure><p>.为当前目录的意思，执行之后你会发现在当前目录多了一个1.txt，在/new目录中还留着一个1.txt</p><h4 id="rm-移除文件或者目录"><a href="#rm-移除文件或者目录" class="headerlink" title="rm (移除文件或者目录)"></a>rm (移除文件或者目录)</h4><p>rm [-fir] 文件或目录</p><blockquote><p>选项与参数:<br>-f :就是 force 的意思,忽略不存在的文件,不会出现警告讯息;<br>-i :互动模式,在删除前会询问使用者是否动作<br>-r :递归删除啊!最常用在目录的删除了!这是非常危险的选项!!!</p></blockquote><p>范例一:</p><blockquote><p>将刚刚在 cp 的范例中建立的 bashrc 删除掉</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">rm -i bashre</span><br></pre></td></tr></table></figure><p>范例二:</p><blockquote><p>透过通配符*的帮忙,将/tmp 底下开头为 bashrc 的档名通通删除:</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -i bashrc*</span><br></pre></td></tr></table></figure><p>注意那个星号,代表的是 0 到无穷多个任意字符喔!很好用的东西!</p><p>如果想删除目录下的所有jpg图像文件的话可以使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -i *.jpg</span><br></pre></td></tr></table></figure><p>范例三:</p><blockquote><p> 将 cp 范例中所建立的 /tmp/etc/ 这个目录删除掉!</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r /tmp/etc</span><br></pre></td></tr></table></figure><p>不管etc里面是否还有文件或者目录，直接删掉</p><h4 id="mv-移动文件与目录-或更名"><a href="#mv-移动文件与目录-或更名" class="headerlink" title="mv(移动文件与目录,或更名)"></a>mv(移动文件与目录,或更名)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv [-fiu] source destination</span><br><span class="line">mv [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure><blockquote><p>选项与参数:<br>-f :force 强制的意思,如果目标文件已经存在,不会询问而直接覆盖;<br>-i :若目标文件 (destination) 已经存在时,就会询问是否覆盖!<br>-u :若目标文件已经存在,且 source 比较新,才会更新 (update)</p></blockquote><p>范例一:</p><blockquote><p>复制一文件,建立一目录,将文件移动到目录中</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">cp ~/.bashrc bashrc</span><br><span class="line">mkdir mvtest</span><br><span class="line">mv bashrc mvtest2</span><br></pre></td></tr></table></figure><blockquote><p>cp相当与负责，mv相当与剪切</p></blockquote><p>范例二:</p><blockquote><p>将刚刚的目录名称更名为 mvtest2</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mvtest mvtest2</span><br></pre></td></tr></table></figure><p>mvtest文件夹这样就更名为mvtest2了</p><h3 id="3-取得文件文件名和目录名称"><a href="#3-取得文件文件名和目录名称" class="headerlink" title="(3)取得文件文件名和目录名称"></a>(3)取得文件文件名和目录名称</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">basename /etc/sysconfig/network</span><br><span class="line">network&lt;== 很简单!就取得最后的档名~</span><br><span class="line">dirname /etc/sysconfig/network</span><br><span class="line">dirname /etc/sysconfig&lt;== 取得的变成目录名了!</span><br></pre></td></tr></table></figure><h2 id="3-文件内容查询"><a href="#3-文件内容查询" class="headerlink" title="3.文件内容查询"></a>3.文件内容查询</h2><table><thead><tr><th>cat</th><th>由第一行开始显示文件内容</th></tr></thead><tbody><tr><td>tac</td><td>从最后一行开始显示,可以看出 tac 是 cat 的倒着写!</td></tr><tr><td>nl</td><td>显示的时候,顺道输出行号!</td></tr><tr><td>more</td><td>一页一页的显示文件内容</td></tr><tr><td>less</td><td>与 more 类似,但是比 more 更好的是,他可以往前翻页!</td></tr><tr><td>head</td><td>只看头几行</td></tr><tr><td>tail</td><td>只看尾巴几行</td></tr><tr><td>od</td><td>以二进制的方式读取文件内容!</td></tr></tbody></table><h3 id="more-一页一页翻动"><a href="#more-一页一页翻动" class="headerlink" title="more (一页一页翻动)"></a>more (一页一页翻动)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more package.json</span><br></pre></td></tr></table></figure><blockquote><p>空格键 (space):代表向下翻一页;</p><p>Enter:代表向下翻『一行』</p><p>/字符串:搜索关键词</p><p>:f ：显示文件名以及目前行数</p><p>q：离开</p><p>b：往回翻页</p></blockquote><h3 id="less-一页一页翻动"><a href="#less-一页一页翻动" class="headerlink" title="less (一页一页翻动)"></a>less (一页一页翻动)</h3><p>可以使用 [pageup] [pagedown] 等按键的功能来往前往后<br>翻看文件</p><blockquote><p>空格键 :向下翻动一页</p><p>pagedown : 向下翻动一页</p><p>pageup：向上翻动一页</p><p>/字符串 :向下搜寻『字符串』的功能;<br> ?字符串 :向上搜寻『字符串』的功能;<br> n :重复前一个搜寻 (与 / 或 ? 有关!)<br>N :反向的重复前一个搜寻 (与 / 或 ? 有关!)<br>g :前进到这个资料的第一行去;<br>G :前进到这个数据的最后一行去 (注意大小写);<br>q :离开 less 这个程序;</p></blockquote><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch [-acdmt] 文件</span><br></pre></td></tr></table></figure><blockquote><p>选项与参数:<br>-a :仅修订 access time;<br>-c :仅修改文件的时间,若该文件不存在则不建立新文件;<br>-d :后面可以接欲修订的日期而不用目前的日期,也可以使用 –date=”日期或时间”<br>-m :仅修改 mtime ;<br>-t :后面可以接欲修订的时间而不用目前的时间,格式为[YYYYMMDDhhmm]</p></blockquote><h2 id="4-文件与目录的默认权限与隐藏权限"><a href="#4-文件与目录的默认权限与隐藏权限" class="headerlink" title="4.文件与目录的默认权限与隐藏权限"></a>4.文件与目录的默认权限与隐藏权限</h2><h3 id="文件预设权限：umask查看"><a href="#文件预设权限：umask查看" class="headerlink" title="文件预设权限：umask查看"></a>文件预设权限：umask查看</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">umask</span></span><br><span class="line">0022</span><br><span class="line"><span class="built_in">umask</span></span><br><span class="line">u=rwx,g=rx,o=rx</span><br></pre></td></tr></table></figure><blockquote><p>查阅的方式有两种,一种可以直接输入 umask ,就可以看到数字型态的权限设定分数, 一种则是<br>加入 -S (Symbolic) 这个选项,就会以符号类型的方式来显示出权限了!</p></blockquote><p><strong><em>这段没看懂，先不写着先！</em></strong></p><h3 id="观察文件类型：file"><a href="#观察文件类型：file" class="headerlink" title="观察文件类型：file"></a>观察文件类型：file</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]<span class="comment"># file ~/.bashrc</span></span><br><span class="line">/root/.bashrc: ASCII text</span><br><span class="line">&lt;==告诉我们是 ASCII 的纯文本档啊!</span><br></pre></td></tr></table></figure><h2 id="5-指令于文件收缩"><a href="#5-指令于文件收缩" class="headerlink" title="5.指令于文件收缩"></a>5.指令于文件收缩</h2><h3 id="脚本文件名的搜索"><a href="#脚本文件名的搜索" class="headerlink" title="脚本文件名的搜索"></a>脚本文件名的搜索</h3><p>在终端机模式当中,连续输入两次[tab]按键就能够知道用户有多少指令可以下达。同时我们可以通过which或者type来寻找这些指令的完整文件名放在哪里，举例寻找’ls’这个常用指令放在哪里：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usg@usg-HP-280-Pro-G2-MT-Legacy:~$ <span class="built_in">which</span> ifconfig</span><br><span class="line">/sbin/ifconfig &lt;==告诉我们是在 /sbin/ifconfig!</span><br></pre></td></tr></table></figure><blockquote><p>这个指令是根据『PATH』这个环境变量所规范的路径,去搜寻『执行档』的档名~ 所以,重点是<br>找出『执行档』而已!且 which 后面接的是『完整档</p></blockquote><p>which(寻找执行命令)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> [-a] <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>选项或参数:<br>-a :将所有由 PATH 目录中可以找到的指令均列出,而不止第一个被找到的指令名称</p><p>范例一：</p><p>搜寻 ifconfig 这个指令的完整文件名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which ifconfig</span><br></pre></td></tr></table></figure><h3 id="文件档名的搜寻"><a href="#文件档名的搜寻" class="headerlink" title="文件档名的搜寻"></a>文件档名的搜寻</h3><blockquote><p>我们一般搜索文件时都是先使用 whereis 或者是 locate 来检查,如果真的找不到了,才以 find 来搜寻whereis 只找系统中某些特定目录底下的文件而已, locate则是利用数据库来搜寻文件名,当然两者就相当的快速, 并且没有实际的搜寻硬盘内的文件系统状态,比较省时间</p></blockquote><h4 id="whereis-寻找文件文件名"><a href="#whereis-寻找文件文件名" class="headerlink" title="whereis (寻找文件文件名)"></a>whereis (寻找文件文件名)</h4><p>whereis [-bmsu] 文件或目录名</p><blockquote><p>选项与参数:<br>-l :可以列出 whereis 会去查询的几个主要目录而已<br>-b :只找 binary 格式的文件<br>-m :只找在说明文件 manual 路径下的文件<br>-s :只找 source 来源文件<br>-u :搜寻不在上述三个项目当中的其他特殊文件</p></blockquote><p>范例一:寻找ifconfieg档名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis ifconfig</span><br></pre></td></tr></table></figure><p>范例二:只找出跟 passwd 有关的『说明文件』档名(man page)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis passwd</span><br><span class="line"><span class="comment"># 全部的档名通通列出来!</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis -m passwd</span><br><span class="line"><span class="comment"># 只有在 man 里面的档名才抓出来!</span></span><br></pre></td></tr></table></figure><h4 id="locate-updatedb"><a href="#locate-updatedb" class="headerlink" title="locate / updatedb"></a>locate / updatedb</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate [-ir] keyword</span><br></pre></td></tr></table></figure><blockquote><p>选项与参数:<br>-i :忽略大小写的差异;<br>-c :不输出档名,仅计算找到的文件数量<br>-l :仅输出几行的意思,例如输出五行则是 -l 5<br>-S :输出 locate 所使用的数据库文件的相关信息,包括该数据库纪录的文件/目录数量等<br>-r :后面可接正规表示法的显示方式</p></blockquote><p>范例一:找出系统中所有与 passwd 相关的档名,且只列出 5 个</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate -l 5 passwd</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd-</span><br><span class="line">/etc/pam.d/passwd</span><br><span class="line">/etc/security/opasswd</span><br><span class="line">/usr/bin/gpasswd</span><br></pre></td></tr></table></figure><p>locate 的使用更简单,直接在后面输入『文件的部分名称』后,就能够得到结果。 举上面的例子来说,我输入 locate passwd ,那么在完整文件名 (包含路径名称) 当中,只要有 passwd 在其中，就会显示出来。</p><p>限制：</p><p>locate是经由数据库来搜寻的,而数据库的建立默认是在每天执行一次所以当你新建立起来的文件, 却还在数据库更新之前搜寻该文件,那么 locate 会无法找到</p><p>手动更新数据库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo updatedb</span><br></pre></td></tr></table></figure><p>ubuntu会读取‘/var/lib/mlocate/mlocate.db’里的配置文件更新数据库文件，可能会等待数分钟。</p><p>updatedb:根据 /etc/updatedb.conf 的设定去搜寻系统硬盘内的文件名,并更新 /var/lib/mlocate 内的数据库<br>文件;<br>locate:依据 /var/lib/mlocate 内的数据库记载,找出用户输入的关键词文件名。</p><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>find [PATH] [option] [action]</p><blockquote><p>选项与参数:</p><ol><li>与时间有关的选项:共有 -atime, -ctime 与 -mtime ,以 -mtime 说明</li></ol><p>-mtime n :n 为数字,意义为在 n 天之前的『一天之内』被更动过内容的文件;<br>-mtime +n :列出在 n 天之前(不含 n 天本身)被更动过内容的文件档名;<br>-mtime -n :列出在 n 天之内(含 n 天本身)被更动过内容的文件档名。<br>-newer file :file 为一个存在的文件,列出比 file 还要新的文件档名</p></blockquote><p>范例一:将过去系统上面 24 小时内有更动过内容 (mtime) 的文件列出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find / -mtime 0</span><br><span class="line"><span class="comment"># 那个 0 是重点!0 代表目前的时间,所以,从现在开始到 24 小时前,</span></span><br><span class="line"><span class="comment"># 有变动过内容的文件都会被列出来!那如果是三天前的 24 小时内?</span></span><br><span class="line"><span class="comment"># find / -mtime 3 有变动过的文件都被列出的意思!</span></span><br></pre></td></tr></table></figure><p>范例二:寻找 /etc 底下的文件,如果文件日期比 /etc/passwd 新就列出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find /etc -newer /etc/passwd</span><br><span class="line"><span class="comment"># -newer 用在分辨两个文件之间的新旧关系是很有用的!</span></span><br></pre></td></tr></table></figure><blockquote><p>选项与参数:<br>2. 与使用者或组名有关的参数:<br>-uid n :n 为数字,这个数字是用户的账号 ID,亦即 UID ,这个 UID 是记录在<br>/etc/passwd 里面与账号名称对应的数字。这方面我们会在第四篇介绍。<br>-gid n :n 为数字,这个数字是组名的 ID,亦即 GID,这个 GID 记录在<br>/etc/group,相关的介绍我们会第四篇说明~<br>-user name :name 为使用者账号名称喔!例如 dmtsai<br>-group name:name 为组名喔,例如 users ;<br>-nouser :寻找文件的拥有者不存在 /etc/passwd 的人!<br>-nogroup :寻找文件的拥有群组不存在于 /etc/group 的文件!<br>当你自行安装软件时,很可能该软件的属性当中并没有文件拥有者,<br>这是可能的!在这个时候,就可以使用 -nouser 与 -nogroup 搜寻。</p></blockquote><p>范例三:搜寻 /home 底下属于 dmtsai 的文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find /home -user dmtsai</span><br><span class="line"><span class="comment"># 这个东西也很有用的~当我们要找出任何一个用户在系统当中的所有文件时,</span></span><br><span class="line"><span class="comment"># 就可以利用这个指令将属于某个使用者的所有文件都找出来喔!</span></span><br></pre></td></tr></table></figure><p>范例四:搜寻系统中不属于任何人的文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -nouser</span><br><span class="line"><span class="comment"># 透过这个指令,可以轻易的就找出那些不太正常的文件。如果有找到不属于系统任何人的文件时,</span></span><br><span class="line"><span class="comment"># 不要太紧张,那有时候是正常的~尤其是你曾经以原始码自行编译软件时。</span></span><br></pre></td></tr></table></figure><blockquote><p>选项与参数:<br>3. 与文件权限及名称有关的参数:<br>    -name filename:搜寻文件名为 filename 的文件;<br>    -size [+-]SIZE:搜寻比 SIZE 还要大(+)或小(-)的文件。这个 SIZE 的规格有:c: 代表 byte, k: 代表 1024bytes。所以,要找比 50KB还要大的文件,就是『 -size +50k 』<br>    -type TYPE:搜寻文件的类型为 TYPE 的,类型主要有:一般正文件 (f), 装置文件 (b, c),目录 (d), 连结档 (l), socket (s), 及 FIFO (p) 等属性。<br>    -perm mode:搜寻文件权限『刚好等于』 mode 的文件,这个 mode 为类似 chmod的属性值,举例来说, -rwsr-xr-x 的属性为 4755 !</p><p>  -perm -mode :搜寻文件权限『必须要全部囊括 mode 的权限』的文件,举例来说,我们要搜寻 -rwxr–r– ,亦即 0744 的文件,使用 -perm -0744,当一个文件的权限为 -rwsr-xr-x ,亦即 4755 时,也会被列出来,因为 -rwsr-xr-x 的属性已经囊括了 -rwxr–r– 的属性了。<br>  -perm /mode :搜寻文件权限『包含任一 mode 的权限』的文件,举例来说,我们搜寻<br>  -rwxr-xr-x ,亦即 -perm /755 时,但一个文件属性为 -rw——-<br>  也会被列出来,因为他有 -rw…. 的属性存在!</p></blockquote><p>范例五:找出档名为 passwd 这个文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name passwd</span><br></pre></td></tr></table></figure><p>找出文件名包含了 passwd 这个关键词的文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">"*passwd*"</span></span><br><span class="line"><span class="comment"># 利用这个 -name 可以搜寻档名啊!默认是完整文件名,如果想要找关键词,</span></span><br><span class="line"><span class="comment"># 可以使用类似 * 的任意字符来处理</span></span><br></pre></td></tr></table></figure><p>范例六:找出 /run 目录下,文件类型为 Socket 的檔名有哪些?</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find /run -<span class="built_in">type</span> s</span><br><span class="line"><span class="comment"># 这个 -type 的属性也很有帮助喔!尤其是要找出那些怪异的文件,</span></span><br><span class="line"><span class="comment"># 例如 socket 与 FIFO 文件,可以用 find /run -type p 或 -type s 来找!</span></span><br></pre></td></tr></table></figure><p>范例七:搜寻文件当中含有 SGID 或 SUID 或 SBIT 的属性</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -perm /7000</span><br><span class="line"><span class="comment"># 所谓的 7000 就是 ---s--s--t ,那么只要含有 s 或 t 的就列出,所以当然要使用 /7000,</span></span><br><span class="line"><span class="comment"># 使用 -7000 表示要同时含有 ---s--s--t 的所有三个权限。而只需要任意一个,就是 /7000</span></span><br></pre></td></tr></table></figure><p>范例九:找出系统中,大于 1MB 的文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -size +1M</span><br></pre></td></tr></table></figure><h2 id="6-Linux磁盘和文件操作"><a href="#6-Linux磁盘和文件操作" class="headerlink" title="6.Linux磁盘和文件操作"></a>6.Linux磁盘和文件操作</h2><h3 id="磁盘与目录的容量"><a href="#磁盘与目录的容量" class="headerlink" title="磁盘与目录的容量"></a>磁盘与目录的容量</h3><p>df [-ahikHTm] [目录或文件名]</p><blockquote><p>选项与参数:<br>-a :列出所有的文件系统,包括系统特有的 /proc 等文件系统;<br>-k :以 KBytes 的容量显示各文件系统;<br>-m :以 MBytes 的容量显示各文件系统;<br>-h :以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示;<br>-H :以 M=1000K 取代 M=1024K 的进位方式;<br>-T :连同该 partition 的 filesystem 名称 (例如 xfs) 也列出;<br>-i :不用磁盘容量,而以 inode 的数量来显示</p></blockquote><p>范例一:将系统内所有的 filesystem 列出来!</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">文件系统           1K-块     已用     可用 已用% 挂载点</span><br><span class="line">udev            10156628        0 10156628    0% /dev</span><br><span class="line">tmpfs            2036200     3324  2032876    1% /run</span><br><span class="line">/dev/sda2       95596964 32107852 58589940   36% /</span><br><span class="line">tmpfs           10180996   665676  9515320    7% /dev/shm</span><br><span class="line">tmpfs               5120        4     5116    1% /run/lock</span><br><span class="line">tmpfs           10180996        0 10180996    0% /sys/fs/cgroup</span><br></pre></td></tr></table></figure><p>范例二:将容量结果以易读的容量格式显示出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">udev            9.7G     0  9.7G    0% /dev</span><br><span class="line">tmpfs           2.0G  3.3M  2.0G    1% /run</span><br><span class="line">/dev/sda2        92G   31G   56G   36% /</span><br><span class="line">tmpfs           9.8G  651M  9.1G    7% /dev/shm</span><br><span class="line">tmpfs           5.0M  4.0K  5.0M    1% /run/lock</span><br><span class="line">tmpfs           9.8G     0  9.8G    0% /sys/fs/cgroup</span><br></pre></td></tr></table></figure><p>范例三:将系统内的所有特殊文件格式及名称都列出来</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -aT</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">文件系统       类型                1K-块     已用     可用 已用% 挂载点</span><br><span class="line">sysfs          sysfs                   0        0        0     - /sys</span><br><span class="line">proc           proc                    0        0        0     - /proc</span><br><span class="line">udev           devtmpfs         10156628        0 10156628    0% /dev</span><br><span class="line">devpts         devpts                  0        0        0     - /dev/pts</span><br><span class="line">tmpfs          tmpfs             2036200     3324  2032876    1% /run</span><br><span class="line">/dev/sda2      ext4             95596964 32107856 58589936   36% /</span><br></pre></td></tr></table></figure><p>范例四:将 /etc 底下的可用的磁盘容量以易读的容量格式显示</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h /etc</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/sda2        92G   31G   56G   36% /</span><br></pre></td></tr></table></figure><p>范例五:将目前各个 partition 当中可用的 inode 数量列出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -ih</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">文件系统       Inode 已用(I) 可用(I) 已用(I)% 挂载点</span><br><span class="line">udev            2.5M     541    2.5M       1% /dev</span><br><span class="line">tmpfs           2.5M    1.1K    2.5M       1% /run</span><br><span class="line">/dev/sda2       5.9M    479K    5.4M       9% /</span><br><span class="line">tmpfs           2.5M    2.3K    2.5M       1% /dev/shm</span><br><span class="line">tmpfs           2.5M       6    2.5M       1% /run/lock</span><br><span class="line">tmpfs           2.5M      18    2.5M       1% /sys/fs/cgroup</span><br></pre></td></tr></table></figure><hr><h3 id="磁盘分区格式化"><a href="#磁盘分区格式化" class="headerlink" title="磁盘分区格式化"></a>磁盘分区格式化</h3><p>lsblk 列出系统上的所有磁盘列表</p><blockquote><p>选项与参数:<br>-d :仅列出磁盘本身,并不会列出该磁盘的分区数据<br>-f :同时列出该磁盘内的文件系统名称<br>-i :使用 ASCII 的线段输出,不要使用复杂的编码 (再某些环境下很有用)<br>-m :同时输出该装置在 /dev 底下的权限数据 (rwx 的数据)<br>-p :列出该装置的完整文件名!而不是仅列出最后的名字而已。<br>-t :列出该磁盘装置的详细数据,包括磁盘队列机制、预读写的数据量大小等</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br><span class="line"></span><br><span class="line">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda      8:0    0 298.1G  0 disk </span><br><span class="line">├─sda1   8:1    0   512M  0 part /boot/efi</span><br><span class="line">├─sda2   8:2    0  93.1G  0 part /</span><br><span class="line">├─sda3   8:3    0   100G  0 part /data</span><br><span class="line">└─sda4   8:4    0 104.5G  0 part /home</span><br></pre></td></tr></table></figure><p>磁盘分区: gdisk/fdisk</p><blockquote><p>MBR 分区表请使用 fdisk 分区, GPT 分区表请使用 gdisk 分区!</p></blockquote><hr><h2 id="7-压缩文件的用途和技术"><a href="#7-压缩文件的用途和技术" class="headerlink" title="7.压缩文件的用途和技术"></a>7.压缩文件的用途和技术</h2><p>在 Linux 的环境中,压缩文件案的扩展名大多是:『 *.tar, *.tar.gz, *.tgz, *.gz, *.Z, *.bz2, *.xz』</p><blockquote><p>*.Z compress 程序压缩的文件;<br>*.zip zip 程序压缩的文件;<br>*.gz gzip 程序压缩的文件;<br>*.bz2 bzip2 程序压缩的文件;<br>*.xz xz 程序压缩的文件;<br>*.tar tar 程序打包的数据,并没有压缩过;<br>*.tar.gz tar 程序打包的文件,其中并且经过 gzip 的压缩<br>*.tar.bz2 tar 程序打包的文件,其中并且经过 bzip2 的压缩<br>*.tar.xz tar 程序打包的文件,其中并且经过 xz 的压缩</p></blockquote><h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><p>gzip 可以说是应用度最广的压缩指令了!目前 gzip 可以解开 compress, zip 与 gzip 等软件所压缩的文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip [-cdtv<span class="comment">#] 檔名</span></span><br></pre></td></tr></table></figure><blockquote><p>选项与参数:<br>-c :将压缩的数据输出到屏幕上,可透过数据流重导向来处理;<br>-d :解压缩的参数;<br>-t :可以用来检验一个压缩文件的一致性~看看文件有无错误;<br>-v :可以显示出原文件/压缩文件案的压缩比等信息;<br>-# :# 为数字的意思,代表压缩等级,-1 最快,但是压缩比最差、-9 最慢,但是压缩比最好!预设是 -6</p></blockquote><p>范例一：将文件解压缩</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -d services.gz</span><br></pre></td></tr></table></figure><blockquote><p>gzip -d 会将原本的 .gz 删除,回复到原本的 services 文件。</p></blockquote><p>范例四:将解开的 services 用最佳的压缩比压缩,并保留原本的文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -9 -c services &gt; services.gz</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>zip 提供 1~9 的压缩等级,不过使用默认的 6 就非常好用了</p></li><li><p>-c 可以将原本要转成压缩文件的资料内容,将它变成文字类型从屏幕输出, 然后我们可以透过大于(&gt;) 这个符号,将原本应该由屏幕输出的数据,转成输出到文件而不是屏幕,所以就能够建立出压缩挡了。只是档名也要自己写, 当然最好还是遵循 gzip 的压缩文件名</p></li></ul></blockquote><hr><h3 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h3><blockquote><p>若说 gzip 是为了取代 compress 并提供更好的压缩比而成立的,那么 bzip2 则是为了取代 gzip 并提供更佳的压缩比而来的,两者用法几乎相同。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bzip2 [-cdkzv<span class="comment">#] 檔名</span></span><br><span class="line">bzcat 檔名.bz2</span><br></pre></td></tr></table></figure><blockquote><p>选项与参数:<br>-c :将压缩的过程产生的数据输出到屏幕上!<br>-d :解压缩的参数<br>-k :保留源文件,而不会删除原始的文件喔!<br>-z :压缩的参数 (默认值,可以不加)<br>-v :可以显示出原文件/压缩文件案的压缩比等信息;<br>-# :与 gzip 同样的,都是在计算压缩比的参数, -9 最佳, -1 最快!</p></blockquote><h3 id="xz"><a href="#xz" class="headerlink" title="xz"></a>xz</h3><blockquote><p>虽然 bzip2 已经具有很棒的压缩比,不过显然某些自由软件开发者还不满足,因此后来还推出了 xz这个压缩比更高的软件!这个软件的用法也跟 gzip/bzip2 几乎一模一样</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xz [-dtlkc<span class="comment">#] 檔名</span></span><br><span class="line">xczt 檔名.xz</span><br></pre></td></tr></table></figure><blockquote><p>选项与参数:<br>-d :就是解压缩啊!<br>-t :测试压缩文件的完整性,看有没有错误-l :列出压缩文件的相关信息<br>-k :保留原本的文件不删除~<br>-c :同样的,就是将数据由屏幕上输出的意思!<br>-# :同样的,也有较佳的压缩比的意思!</p></blockquote><h2 id="8-打包指令tar"><a href="#8-打包指令tar" class="headerlink" title="8.打包指令tar"></a>8.打包指令tar</h2><p>gzip, bzip2, xz仅能对单一文件进行压缩，所以诞生了tar将多个文件或目录包成一个大文件的指令功能，tar 可以将多个目录或文件打包成一个大文件,同时还可以透过 gzip/bzip2/xz 的支持,将该文件同时进行压缩</p><p>目前 Windows 的 WinRAR 也支持 .tar.gz 档名的解压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar [-z|-j|-J] [cv] [-f 待建立的新檔名] filename... &lt;==打包与压缩</span><br><span class="line">tar [-z|-j|-J] [tv] [-f 既有的 tar 檔名] &lt;==察看檔名</span><br><span class="line">tar [-z|-j|-J] [xv] [-f 既有的 tar 檔名] [-C 目录] &lt;==解压缩</span><br></pre></td></tr></table></figure><blockquote><p>选项与参数:<br>-c :建立打包文件,可搭配 -v 来察看过程中被打包的档名(filename)<br>-t :察看打包文件的内容含有哪些档名,重点在察看『档名』就是了;<br>-x :解打包或解压缩的功能,可以搭配 -C (大写) 在特定目录解开<br>特别留意的是, -c, -t, -x 不可同时出现在一串指令列中。<br>-z :透过 gzip的支持进行压缩/解压缩:此时档名最好为 *.tar.gz<br>-j :透过 bzip2 的支持进行压缩/解压缩:此时档名最好为 *.tar.bz2<br>-J :透过 xz的支持进行压缩/解压缩:此时档名最好为 *.tar.xz<br>特别留意, -z, -j, -J 不可以同时出现在一串指令列中<br>-v:在压缩/解压缩的过程中,将正在处理的文件名显示出来!<br>-f filename:-f 后面要立刻接要被处理的档名!建议 -f 单独写一个选项啰!(比较不会忘记)<br>-C 目录:这个选项用在解压缩,若要在特定目录解压缩,可以使用这个选项。</p><p>其他后续练习会使用到的选项介绍:<br>-p(小写) :保留备份数据的原本权限与属性,常用于备份(-c)重要的配置文件<br>-P(大写) :保留绝对路径,亦即允许备份数据中含有根目录存在之意;<br>–exclude=FILE:在压缩的过程中,不要将 FILE 打包!</p></blockquote><p>其实最简单的使用 tar 就只要记忆底下的方式即可：</p><ul><li>压缩:tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称</li><li>查 询:tar -jtv -f filename.tar.bz2</li><li>解压缩:tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录</li></ul><hr><h2 id="9-vim的使用"><a href="#9-vim的使用" class="headerlink" title="9.vim的使用"></a>9.vim的使用</h2><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200714102502.png" alt=""></p><h3 id="一般指令模式"><a href="#一般指令模式" class="headerlink" title="一般指令模式"></a>一般指令模式</h3><table><thead><tr><th>h 或 向左箭头键(←)</th><th>光标向左移动一个字符</th></tr></thead><tbody><tr><td>j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td>k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td>l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td>[Ctrl] + [f]</td><td>屏幕『向下』移动一页,相当于 [Page Down]按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>屏幕『向上』移动一页,相当于 [Page Up] 按键 (常用)</td></tr></tbody></table><h3 id="一般指令模式切换到编辑模式"><a href="#一般指令模式切换到编辑模式" class="headerlink" title="一般指令模式切换到编辑模式"></a>一般指令模式切换到编辑模式</h3><table><thead><tr><th>i，I</th><th>进入插入模式(Insert mode):i 为『从目前光标所在处插入』, I 为『在目前所在列的第一个非空格符处开始插入</th></tr></thead><tbody><tr><td>a,A</td><td>进入插入模式(Insert mode):a 为『从目前光标所在的下一个字符处开始插入』, A 为『从光标所在列的最后一个字符处开始插入』。(常用)</td></tr><tr><td>o,O</td><td>进入插入模式(Insert mode):这是英文字母 o 的大小写。 o 为『在目前光标所在的下一列处插入新的一列』; O 为在目前光标所在处的上一列插入新的一列!(常用)</td></tr><tr><td>r,R</td><td>进入取代模式(Replace mode):r 只会取代光标所在的那一个字符一次; R 会一直取代光标所在的文字,直到按下 ESC为止;(常用)</td></tr></tbody></table><h3 id="一般指令切换到指令列模式"><a href="#一般指令切换到指令列模式" class="headerlink" title="一般指令切换到指令列模式"></a>一般指令切换到指令列模式</h3><table><thead><tr><th>:W</th><th>将编辑的数据写入硬盘文件中(常用)</th></tr></thead><tbody><tr><td>:w!</td><td>若文件属性为『只读』时,强制写入该文件。不过,到底能不能写入, 还是跟你对该文件的文件权限有关啊!</td></tr><tr><td>:q</td><td>离开 vi (常用)</td></tr><tr><td>:q!</td><td>若曾修改过文件,又不想储存,使用 ! 为强制离开不储存文件。</td></tr><tr><td>:wq</td><td>储存后离开,若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td>ZZ</td><td>这是大写的 Z 喔!若文件没有更动,则不储存离开,若文件已经被更动过,则储存后离开!</td></tr><tr><td>:w[filename]</td><td>将编辑的数据储存成另一个文件(类似另存新档)</td></tr><tr><td>:r[filename]</td><td>在编辑的数据中,读入另一个文件的数据。亦即将 『filename』 这个文件内容加到游标所在列后面</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux指令&quot;&gt;&lt;a href=&quot;#Linux指令&quot; class=&quot;headerlink&quot; title=&quot;Linux指令&quot;&gt;&lt;/a&gt;Linux指令&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.pixabay.com/photo/2018/04/23/14/43/ubuntu-3344434_960_720.png&quot; alt=&quot;Ubuntu, Desktop, Operating System, Computer, Office&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ubuntu" scheme="https://blog.dgut.top/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>记录一下博客的由来</title>
    <link href="https://blog.dgut.top/2020/07/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/"/>
    <id>https://blog.dgut.top/2020/07/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/</id>
    <published>2020-07-02T07:11:24.000Z</published>
    <updated>2020-07-17T16:59:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>这个博客是于2020年7月2日创建的。使用的是hexo博客框架+firebase hosting 托管主机建立的。</p><p><img src= "/img/loading.gif" data-src="https://images-1254006831.cos.ap-chengdu.myqcloud.com/firebase-2.jpeg" alt="img"></p><a id="more"></a><p>因为之前自己也搭建过博客，但当时使用的是vps+wordpress的方案（不稳定，数据容易丢，而且要租用服务器自己托管网站）这段时间学习Linux的过程中偶然发现了谷歌的副<a href="https://firebase.google.com/" target="_blank" rel="noopener">firebase</a>平台（它是谷歌旗下一个<em>后端即服务(BaaS)</em>的平台，简单来说就是后端在云端，不用再担心数据库、认证、存储和扩张等，直接调用即可。）</p><p><img src= "/img/loading.gif" data-src="https://images-1254006831.cos.ap-chengdu.myqcloud.com/firebase-overview.png" alt="img"></p><p>目前Firebase提供了非常多的服务，这里我们用到了其中的<strong>托管</strong>。</p><p>免费的托管方案提供了：</p><ul><li>1G的储存空间</li><li>10G/月的流量超出后可以付费购买。</li></ul><p>总的来说得益于Google在世界各地的cdn加速，使得在firebase平台托管的网站能够免费地高速访问（比github pages快多了）</p><p>现在博客正式上线了，这将记录我的一些学习记录。</p><h2 id="2-博客运行的代码"><a href="#2-博客运行的代码" class="headerlink" title="2.博客运行的代码"></a>2.博客运行的代码</h2><h3 id="hexo部分"><a href="#hexo部分" class="headerlink" title="hexo部分"></a>hexo部分</h3><h4 id="1-安装npm、Node-js"><a href="#1-安装npm、Node-js" class="headerlink" title="1.安装npm、Node.js"></a>1.安装npm、Node.js</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update -y</span><br><span class="line">sudo apt install -y nodejs nodejs-legacy npm</span><br><span class="line">sudo apt-get install -y npm</span><br></pre></td></tr></table></figure><h4 id="2-初始化文件夹"><a href="#2-初始化文件夹" class="headerlink" title="2.初始化文件夹"></a>2.初始化文件夹</h4><p>在一个空白的目录执行安装hexo博客的框架</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo init</span><br></pre></td></tr></table></figure><p>初始化完成后，就有了如下的文件目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>其中<code>_config.yml</code>为配置文件，<code>source</code>里存放所有的文章，<code>themes</code>文件夹可以配置不同的主题，大量的主题可以在官网上找到。</p><h4 id="3-写作"><a href="#3-写作" class="headerlink" title="3.写作"></a>3.写作</h4><p>当一切准备就绪之后就可以兴建第一篇文章了，在hexo主目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure><p>就会在<code>source/_posts</code>文件夹下生成一篇文章，比如运行了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post 第一篇文章</span><br></pre></td></tr></table></figure><p>就会在上述目录下找到一个名为<code>第一篇文章.md</code>的文件，然后就可以在里面用markdown写作了。这里推荐使用<a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>作为markdown的写作工具</p><h4 id="4-生成静态页面html文件"><a href="#4-生成静态页面html文件" class="headerlink" title="4.生成静态页面html文件"></a>4.生成静态页面html文件</h4><p>写作完成后，在根目录运行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>就会将文章和主题打包在一起生成<code>HTML</code>文件，生成的文件会放在根目录的<code>public</code>文件夹下。网站运行所需的所有东西全都被放在这个文件夹下。</p><p>同时，也可以运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>这个命令会在本地启动服务器，可以通过<code>http://localhost:4000/</code>来预览效果。</p><p>可以看到hexo的使用非常简单。更多详细的说明可以查看<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a>。</p><p>但是我这里firebase作为托管服务器，实际运行的时候无需启动本地服务器可以直接执行命令把hexo博客提交到firebase平台。</p><p>完整提交内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firebase deploy</span><br></pre></td></tr></table></figure><p>只提交更改内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firebase deploy --only hosting</span><br></pre></td></tr></table></figure><p>部署就完成了，内容将部署至 Firebase项目的默认托管网址：project-id.firebaseapp.com</p><p>这样在我的博客网站：<a href="https://usg-cn.web.app/" target="_blank" rel="noopener">https://usg-cn.web.app/</a> 就可以看到修改后的结果了。</p><h3 id="firebase部分"><a href="#firebase部分" class="headerlink" title="firebase部分"></a>firebase部分</h3><p><a href="https://firebase.google.com/" target="_blank" rel="noopener">Firebase</a> ，谷歌的又一个神器，具体怎么神我就不多作介绍了，我们只用上了其中很小的一部分功能：托管。</p><p><img src= "/img/loading.gif" data-src="https://images-1254006831.cos.ap-chengdu.myqcloud.com/firebase-overview.png" alt="img"></p><p>关于<strong>托管</strong>，官方是这样介绍的：</p><p>Firebase 托管为您的网页应用提供快速、安全的静态托管。<br>Firebase 托管是为开发者提供的生产级网页内容托管服务。 借助 Firebase 托管，您只需一条命令，便可轻松快捷地将网页应用和静态内容部署到全球内容分发网络。</p><p>使用Firebase有很多非常难得的好处：</p><ul><li>全球SSD CDN，速度比GitHub快。</li><li>一键回滚。Firebase托管使用一键式回滚提供完整的版本控制和管理。</li><li>零配置的SSL，自动启动HTTPS。</li><li>完美的中文文档支持。</li></ul><p>使用Firebase的体验非常好，虽然是谷歌的产品但是提供了非常完整的中文文档支持，而且写得非常简单易懂，同一个代码示例提供多种编程语言的版本，里面的很多功能都能快速上手。</p><h4 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h4><p>首先访问<a href="https://console.firebase.google.com/" target="_blank" rel="noopener">Firebase</a>创建一个项目。</p><p>创建时<strong>项目ID</strong>要注意，它会被用在URL上，如果不想自己定义域名的话以后就会一直用这个ID来作为域名访问。比如ID是<code>usg-cn</code>，那么域名就会是<code>https://usg-cn.firebaseapp.com/</code> 和 <a href="https://usg-cn.web.app/" target="_blank" rel="noopener">https://usg-cn.web.app/</a></p><h4 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h4><p>运行以下命令来安装Firebase（需预先安装<code>Node.js</code>）:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g firebase-tools</span><br></pre></td></tr></table></figure><p>然后运行以下命令来登录，运行完后会弹出一个浏览器窗口：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firebase login</span><br></pre></td></tr></table></figure><p>登录后再切换到刚才生成的Hexo目录下，</p><p>cd hexo/</p><p>运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firebase init</span><br></pre></td></tr></table></figure><p>运行时会让选择要使用什么功能，因为我们使用过的是托管所以这里选择<code>Hosting</code>，然后会提示选择一个用作公共根目录的目录。这个目录就是放所有静态文件的地方，默认为<code>public</code>，<strong>名字刚好和Hexo生成的静态文件目录名字一样</strong>，所以无需更改。</p><p>这个命令会在项目目录下创建一个<code>firebase.json</code>配置文件，可以通过它来自定义托管行为。</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>最后，完全所有改动后运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>这个命令会让Hexo生成<code>public</code>文件夹，因为Firebase部署的就是public文件夹，<strong>所以要先运行Hexo。</strong></p><p>然后运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firebase deploy</span><br></pre></td></tr></table></figure><p>部署就完成了，内容将部署至 Firebase项目的默认托管网址：project-id.firebaseapp.com</p><p>大功告成了，接下来就是欣赏博客的时候了。</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><ul><li><code>hexo clean</code>用于清除旧版本生成的静态文件（推送到远端的public文件）</li><li><code>hexo generate</code>生成新的静态文件（public文件），生成这个文件是根据<code>/source</code>文件中的内容生成</li><li><code>hexo deploy</code>推送github部署博客</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> <span class="comment"># 新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment"># 新建页面</span></span><br><span class="line">hexo generate <span class="comment"># 生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment"># 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="comment"># 将静态博客页面部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment"># 查看Hexo的版本</span></span><br></pre></td></tr></table></figure><ul><li><code>hexo new</code>创建新的文章，创建的文章会在<code>source/_posts/</code>目录下，文章格式.md（Markdown格式），每次就可以直接编辑博客直接编辑这个文件就可以了，也可以把写好.md的文件直接拖到这个文件夹中</li><li><code>hexo generate</code>生成静态页面，生成的文件都是在<code>public/</code>文件下，这个文件就是最后推送到github的文件</li></ul><h4 id="短命令"><a href="#短命令" class="headerlink" title="短命令"></a>短命令</h4><p>在ubuntu的环境下可以使用短命令来执行一键将静态博客页面部署到firebase</p><p>首先打开你个人目录下的.bashrc隐藏文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>把光标移到末尾按’i’键插入一行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> gkd=<span class="string">'hexo clean &amp;&amp; hexo g &amp;&amp; firebase deploy'</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="ubuntu.png" alt="ubuntu"></p><blockquote><p>‘gkd’（搞快点）就是短命令名，每当输入’gkd’将自动执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">firebase deploy</span><br></pre></td></tr></table></figure><p>部署三连</p></blockquote><p>然后按’Esc’后按’:wq’保存退出</p><p>最后在终端输入命令生效刚刚的更改就完事了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>这样就以后写blog就可以节省掉’部署三连’的时间了</p><blockquote><p>拓展：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> gql=<span class="string">'hexo g &amp;&amp; firebase deploy --only hosting'</span></span><br></pre></td></tr></table></figure><p>只执行构建和只部署更改</p><blockquote><p>执行source ~/.bashrc生效更改后要重启终端才会生效</p></blockquote></blockquote><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/ZengWenJian123/picBed/img/20200710142114.png" alt=""></p><ul><li>一键三连</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;这个博客是于2020年7月2日创建的。使用的是hexo博客框架+firebase hosting 托管主机建立的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images-1254006831.cos.ap-chengdu.myqcloud.com/firebase-2.jpeg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="博客" scheme="https://blog.dgut.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="https://blog.dgut.top/tags/hexo/"/>
    
      <category term="firebase" scheme="https://blog.dgut.top/tags/firebase/"/>
    
  </entry>
  
</feed>
